\\\<?xml version="1.0" encoding="utf-8" standalone="yes"?>
\\\<?xml-stylesheet type="text/xsl" href="comments.xsl"?>
\\\
\\\<program>
\\\<title>Training Paradigm Code - Antonio Paolini&quot;s 2008 third-year research group</title>
\\\<history>
\\\ <revision number="1.0">
\\\  <author>Simeon Morgan &lt;smorgan@students.latrobe.edu.au&gt;</author>
\\\  <created>2008-04-10 22:17</created>
\\\  <summary>First version</summary>
\\\ </revision>
\\\</history>

Y2KCOMPLIANT \\\Force use of 4-digit year


\\\<constant group="general" represents="parameter" name="Def_MaxDuration" summary="Default maximum duration (in minutes) for program to run"></constant>
^Def_MaxDuration = 100
\\\<constant group="general" represents="parameter" name="Abs_MaxTrials" summary="Limit on maximum number of trials to be recorded/processed"></constant>
^Abs_MaxTrials = 10000
\\\<constant group="general" represents="parameter" name="Def_InterToneDelay" summary="Default Time (in ms) between presentation of first and second tones"></constant>
^Def_InterToneDelay = 500
\\\<constant group="general" represents="parameter" name="Def_PreToneDelay" summary="Default Time (in ms) between starting lever trigger and first tone presentation."></constant>
^Def_PreToneDelay = 500

\\\<array name="G" outputName="Configuration" outputStyle="cols" summary="">
DIM G = 4
\\\<column name="C_MaxDuration" outputName="Max Duration" summary="Maximum time before automatic termination (minutes)"></column>
^G_MaxDuration = 0
\\\<column name="G_CamUnconnectedState" summary="Used to store 'Unconnected' StateID of camera"></column>
^G_CamUnconnectedState = 1
\\\<column name="G_CamConnectOkState" summary="Used to store 'Ok' StateID of camera"></column>
^G_CamConnectOkState = 2
\\\<column name="G_CamConnectFailState" summary="Used to store 'Fail' StateID of camera"></column>
^G_CamConnectFailState = 3
\\\<column name="C_MaxDurationMsec" summary="Maximum time before automatic termination in msec (autogenerated)"></column>
^G_MaxDurationMsec = 4
\\\</array>

\\\Control Variables 
\\\<!--<variable alias="" name="" summary=""></variable>-->
\\\<variable alias="Maximum Duration" name="C(^C_MaxDuration)" summary="Maximum time before automatic termination"></variable>
Var_Alias Maximum Time (minutes)			= G(0)


\\\Example comment line <!--<constant represents="input|output|other" name="LeverTrigger" summary="Input ID of the fixed lever 'starting' trigger"></constant>-->

\\\Constant block
\\\<input name="Inp_HeadEntry" summary="Input ID of the head entry unit on pellet dispenser"></input>
^Inp_HeadEntry = 1
\\\<input name="Inp_Lickometer" summary="Input ID of the lickometer"></input>
^Inp_Lickometer = 2
\\\<input name="Inp_LeverTrigger" summary="Input ID of the fixed lever 'starting' trigger"></input>
^Inp_LeverTrigger = 3
\\\<input name="Inp_LeverInputLeft" summary="Input ID of retractable lever on the left"></input>
^Inp_LeverInputLeft = 4
\\\<input name="Inp_LeverInputRight" summary="Input ID of retractable lever on the right"></input>
^Inp_LeverInputRight = 5
\\\<input name="Inp_UltrasonicA" summary="Input ID of ultrasonic input 1 of 2"></input>
^Inp_UltrasonicA = 6
\\\<input name="Inp_UltrasonicB" summary="Input ID of ultrasonic input 2 of 2"></input>
^Inp_UltrasonicB = 7

\\\<output name="Out_PelletDispenser" summary="Output ID of feeder unit."><use>Dispenses on OFF->ON transition</use></output>
^Out_PelletDispenser = 1
\\\<output name="Out_LiquidDispenser" summary="Output ID of drinking unit."><use>Toggle liquid availability: OFF->Unavailable, ON->Available</use></output>
^Out_LiquidDispenser = 2
\\\<output name="Out_LeftLeverRetract" summary="Output trigger to extend/retract left lever"><use>Toggle extended state of lever; OFF->Not extended, ON->Extended</use></output>
^Out_LeftLeverRetract = 3
\\\<output name="Out_RightLeverRetract" summary="Output trigger to extend/retract right lever"><use>Toggle extended state of lever; OFF->Not extended, ON->Extended</use></output>
^Out_RightLeverRetract = 4
\\\<output name="Out_LickShockSwitch" summary="Output ID of ENV-250A Contact Lickometer switching unit."><use>OFF->Lickometer active, ON->Floor connected to shock emitter</use></output>
^Out_LickShockSwitch = 5
\\\<output name="Out_Ultrasonic" summary="Output ID of ultrasonic recording unit."><use>???</use></output>
^Out_Ultrasonic = 6
\\\<output name="Out_ShockEmitter" summary="Output ID of shock unit."><use>Toggle shock delivery: OFF->No shock presently being delivered, ON->CONTINUOUS SHOCK PRESENTLY BEING DELIVERED</use></output>
^Out_ShockEmitter = 7
\\\<output name="Out_HouseLightRear" summary="Output ID of rear-most house light."><use>OFF->unlit, ON->lit</use></output>
^Out_HouseLightRear = 9
\\\<output name="Out_HouseLightMid" summary="Output ID of miidle house light."><use>OFF->unlit, ON->lit</use></output>
^Out_HouseLightMid = 10
\\\<output name="Out_HouseLightFront" summary="Output ID of front-most house light."><use>OFF->unlit, ON->lit</use></output>
^Out_HouseLightFront = 11
\\\<output name="Out_LedRed" summary="Output ID of Red LED (rearmost)."><use>OFF->unlit, ON->lit</use></output>
^Out_LedRed = 12
\\\<output name="Out_LedGreen" summary="Output ID of Green LED (frontmost)."><use>OFF->unlit, ON->lit</use></output>
^Out_LedGreen = 13
\\\<output name="Out_LedYellow" summary="Output ID of Yellow LED (middle)."><use>OFF->unlit, ON->lit</use></output>
^Out_LedYellow = 14

\\\<constant group="audio" represents="delta" name="Snd_SPIncrement (not in use)" summary="Size of increment in sound pressure (in dB)"></constant>
^Snd_SPIncrement = 10
\\\<constant group="audio" represents="delta" name="Snd_FreqIncrement" summary="Size of increment in sound frequency (in Hz)"></constant>
^Snd_FreqIncrement = 1000
\\\<constant group="audio" represents="parameter" name="Snd_ToneBurstDuration" summary="Duration of the burst of sound (in ms)"></constant>
^Snd_ToneBurstDuration = 1000
\\\<constant group="audio" represents="parameter" name="Snd_InterBurstDuration" summary="Duration of pause between sound bursts (in ms)"></constant>
^Snd_InterBurstDuration = 2000
\\\<constant group="audio" represents="parameter" name="Snd_SP" summary="Sound pressure at which to present tones (in dB)"></constant>
^Snd_SP = 75
\\\<constant group="audio" represents="parameter" name="Snd_RiseFallTime" summary="Rise/Fall time (in ms)"></constant>
^Snd_RiseFallTime = 10
\\\<constant group="audio" represents="parameter" name="Snd_PreToneDelay" summary="Delay between trigger and first tone presentation (in ms)"></constant>
^Snd_PreToneDelay = 1000

\\\<constant group="shock" represents="parameter" name="Shk_IncorrectShockDuration" summary="Duration of the electrical shock for an incorrect response (in ms)"></constant>
^Shk_IncorrectShockDuration = 500

\\\<constant group="levers" represents="parameter" name="Lvr_RetractDelay" summary="Time (in s) to wait for levers to extend and retract"></constant>
^Lvr_RetractDelay = 2

\\\<constant group="k-pulse" represents="parameter" name="KP_ExperimentEnd" summary="Trigger the experiment to end"></constant>
^KP_ExperimentEnd = 1

\\\<constant group="z-pulse" represents="parameter" name="ZP_TerminateExperiment" summary="End the experiment - may be used if error occurrs"></constant>
^ZP_TerminateExperiment = 1

\\\<constant group="z-pulse" represents="parameter" name="ZP_StartVideoRec" summary="Start video recording"></constant>
^ZP_StartVideoRec = 2
\\\<constant group="z-pulse" represents="parameter" name="ZP_EndVideoRec" summary="End video recording"></constant>
^ZP_EndVideoRec = 3

\\\<constant group="z-pulse" represents="parameter" name="ZP_ExtendSipper" summary="Trigger extend sipper; set S for max # of sips before retraction"></constant>
^ZP_ExtendSipper = 4
\\\<constant group="z-pulse" represents="parameter" name="ZP_SipperLimitHit" summary="Triggers when the sipper limit is hit; if S less than 0 then never triggered."></constant>
^ZP_SipperLimitHit = 5
\\\<constant group="z-pulse" represents="parameter" name="ZP_RetractSipper" summary="Trigger sipper retract, regardless of whether sipper limit hit"></constant>
^ZP_RetractSipper = 6

\\\<constant group="z-pulse" represents="parameter" name="ZP_ExperimentEnd" summary="Trigged to end the experiment"></constant>
^ZP_ExperimentEnd = 7



\\\ARRAYS
\\\<array name="J" outputName="Trials overview" outputStyle="cols" summary="Trial summary data">
DIM J = 4
\\\<column name="J_CompletedTrials" outputName="Completed trials" summary="Total number of trials that have occurred so far"></column>
^J_CompletedTrials = 0
\\\<column name="J_CurrentHours" outputName="Duration hours" summary="Hours since commencement (for H:M:S.MS)"></column>
^J_CurrentHours = 1
\\\<column name="J_CurrentMinutes" outputName="Duration minutes" summary="Minutes since commencement (for H:M:S.MS)"></column>
^J_CurrentMinutes = 2
\\\<column name="J_CurrentSeconds" outputName="Duration seconds" summary="Seconds since commencement (for H:M:S.MS)"></column>
^J_CurrentSeconds = 3
\\\<column name="J_CurrentMilliseconds" outputName="Duration milliseconds" summary="Milliseconds since commencement (for H:M:S.MS) "></column>
^J_CurrentMilliseconds = 4
\\\</array>

\\\<array name="K" outputName="Trials" outputStyle="rows" summary="Specific trial data">
DIM K = 60000 \ we wish it could be (^Gen_MaxTrials * 6) - 1
\\\<column name="K_TrialNumber" outputName="Trial" summary="Number of this trial"></column>
^K_TrialNumber = 0
\\\<column name="K_TrialTimeHour" outputName="hour" summary="Time post-commencement (H) this trial occurred"></column>
^K_TrialTimeHour = 1
\\\<column name="K_TrialTimeMinute" outputName="minute" summary="Time post-commencement (M) this trial occurred"></column>
^K_TrialTimeMinute = 2
\\\<column name="K_TrialTimeSecond" outputName="second" summary="Time post-commencement (S) this trial occurred"></column>
^K_TrialTimeSecond = 3
\\\<column name="K_TrialTimeMillisecond" outputName="millisecond" summary="Time post-commencement (MS) this trial occurred"></column>
^K_TrialTimeMillisecond = 4
\\\<column name="K_TrialMsec" outputName="Msec from start" summary="Time post-commencement (msec) this trial occurred TOTAL - Not related to H:M:S"></column>
^K_TrialMsec = 5
\\\</array>
\\\<constant group="general" represents="parameter" name="K_TrialIndexMultiplier" summary="Multiplier to be used for each trial"></constant>
^K_TrialIndexMultiplier = 6

\\\<array name="I" summary="Integer list representing reward Z-values for reward delivery">
LIST I = 1
\\\</array>

\\\<variable name="P" summary="Storage variable for camera state"></variable>
\\\<variable name="Q" summary="Current offset for B array"></variable>
\\\<variable name="S" summary="Number of sips remaining before sipper retract - set before using ZP_ExtendSipper"></variable>
\\\<variable name="U" summary="ID for reward to be given"></variable>

\\\<variable name="L" summary="Timer - # of msec since commencement"></variable>
\\\<variable name="M" summary="Timer - variable swapping 1"></variable>
\\\<variable name="N" summary="Timer - variable swapping 2"></variable>

\\\<stateset id="1" summary="Run the preparation and termination functions of the program">
S.S.1,
\\\<state id="1" summary="Set variables to default values">
S1,
	0":;
		SET G(^G_MaxDuration) = ^Def_MaxDuration;
			---> S9

\\\</state>
\\\<state id="9" summary="Pause until start command is issued; then convert used-data from ms to sec where required and continue. Presumably variables are set when start is triggered.">
S9,
	#START:;
		ON ^Out_LiquidDispenser;
		SHOW 5, Running, 0;
		SET G(^G_MaxDurationMsec) = G(^G_MaxDuration) * 60000; \convert minutes to milliseconds
		Z^ZP_StartVideoRec;
		---> S10
	0.01":;
		SHOW 1, Max duration, G(^G_MaxDuration);
\		SHOW 2, Time Remaining, G(^G_MaxDuration);
		SHOW 2, Completed Trials, 0;
		SHOW 5, Awaiting start, 0;
		---> SX
\\\</state>
\\\<state id="10" summary="Wait for program termination">
S10,
	#Z^ZP_TerminateExperiment:;
		OFF ^Out_LiquidDispenser;
		SET K(Q + ^K_TrialIndexMultiplier) = -987.987;
		---> S20

\\\</state>
\\\<state id="10" summary="Turn off all outputs, save data and end">
S20,   
  0":;
	SHOW 5, Experiment finished, 1;	
  	---> STOPABORTFLUSH
\\\</state>
\\\</stateset>


\\\<stateset id="2" summary="Operate the experiment functionally ">
S.S.2,
\\\<state id="1" summary="Wait for the start trigger">
S1,
	#START:;
		---> S2
\\\</state>
\\\<state id="2" summary="Wait for lever 1 press, then identify correct/incorrect levers and move to present tones">
S2,
	#R^Inp_Lickometer:;
		SET Q = J(^J_CompletedTrials) * ^K_TrialIndexMultiplier;
		SET K(Q + ^K_TrialIndexMultiplier) = -987.987; \set array end to be after the current trial
		SET K(Q + ^K_TrialTimeHour) = J(^J_CurrentHours), K(Q + ^K_TrialTimeMinute) = J(^J_CurrentMinutes), K(Q + ^K_TrialTimeSecond) = J(^J_CurrentSeconds), K(Q + ^K_TrialTimeMillisecond) = J(^J_CurrentMilliseconds);
		SET K(Q + ^K_TrialMsec) = L;
		SET K(Q + ^K_TrialNumber) = J(^J_CompletedTrials) + 1;
		ADD J(^J_CompletedTrials);

		SHOW 2, Licks taken,  J(^J_CompletedTrials);
		---> S2

	#Z^ZP_ExperimentEnd:;
		Z^ZP_TerminateExperiment;
		---> S32
\\\</state>
\\\</stateset>

\\\<stateset id="7" summary="Timer - counts up in msec (in steps of 10 msec)">
S.S.7,
\\\<state id="1" summary="Wait for start trigger">
S1,
	#START:;
		---> S2
\\\<state id="2" summary="Increment counter, hour, minutes, seconds, milliseconds">
\\\</state>
S2,
	#Z^ZP_TerminateExperiment:;
		---> S32
	0.01":;
		SET L = L + 10;
		SET J(^J_CurrentMilliseconds) = J(^J_CurrentMilliseconds) + 10;
		SET M = J(^J_CurrentMilliseconds), N = J(^J_CurrentSeconds);
		~ IF (M = 1000) then begin M := 0; N := N + 1; end; ~;
		SET J(^J_CurrentMilliseconds) = M, M = N, N = J(^J_CurrentMinutes);
		~ IF (M = 60) then begin M := 0; N := N + 1; end; ~;
		SET J(^J_CurrentSeconds) = M, M = N, N = J(^J_CurrentHours);
		~ IF (M = 60) then begin M := 0; N := N + 1; end; ~;
		SET J(^J_CurrentMinutes) = M, J(^J_CurrentHours) = N;
		SHOW 16, Hours, J(^J_CurrentHours);
		SHOW 17, Minutes, J(^J_CurrentMinutes);
		SHOW 18, Seconds, J(^J_CurrentSeconds);
		SHOW 19, Milliseconds, J(^J_CurrentMilliseconds);
			---> SX
\\\</state>
\\\</stateset>

\\\<stateset id="20" summary="Camera management - connect to camera system and start/stop video">
S.S.20,
\\\<state id="1" summary="Set constants for video connection state">
S1,
	0":;
		~P := UNCONNECTED;~;
		SET G(^G_CamUnconnectedState) = P;
        ~P := CONNECT_OK;~;
		SET G(^G_CamConnectOkState) = P;
        ~P := CONNECT_FAIL;~;
		SET G(^G_CamConnectFailState) = P;
		---> S2
\\\</state>
\\\<state id="2" summary="Wait for video commands">
S2,
	#Z^ZP_StartVideoRec:;
		~ IF ((box = 1) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX1', StartSavingEvent, 'StartEvent'); end; ~;
		~ IF ((box = 2) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX2', StartSavingEvent, 'StartEvent'); end; ~;
		~ IF ((box = 3) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX3', StartSavingEvent, 'StartEvent'); end; ~;
		~ IF ((box = 4) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX4', StartSavingEvent, 'StartEvent'); end; ~;
		---> SX
	#Z^ZP_EndVideoRec:;
		~ IF ((box = 1) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX1', StopSavingEvent, 'StopEvent'); end; ~;
		~ IF ((box = 2) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX2', StopSavingEvent, 'StopEvent'); end; ~;
		~ IF ((box = 3) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX3', StopSavingEvent, 'StopEvent'); end; ~;
		~ IF ((box = 4) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX4', StopSavingEvent, 'StopEvent'); end; ~;
		---> SX
	#Z^ZP_TerminateExperiment:;
		~ IF ((box = 1) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX1', StopSavingEvent, 'StopEvent'); end; ~;
		~ IF ((box = 2) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX2', StopSavingEvent, 'StopEvent'); end; ~;
		~ IF ((box = 3) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX3', StopSavingEvent, 'StopEvent'); end; ~;
		~ IF ((box = 4) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX4', StopSavingEvent, 'StopEvent'); end; ~;

		~ IF ((box = 1) and (P = CONNECT_OK)) then begin DisconnectVM('.', 'BOX1'); O := GetIfaceStatus();end;~;
		~ IF ((box = 2) and (P = CONNECT_OK)) then begin DisconnectVM('.', 'BOX2'); O := GetIfaceStatus();end;~;
		~ IF ((box = 3) and (P = CONNECT_OK)) then begin DisconnectVM('.', 'BOX3'); O := GetIfaceStatus();end;~;
		~ IF ((box = 4) and (P = CONNECT_OK)) then begin DisconnectVM('.', 'BOX4'); O := GetIfaceStatus();end;~;
		---> S32
	0.1":;
		~ IF ((box = 1) and (P <> CONNECT_OK)) then begin ConnectToVMEx(MG, BOX, '.', 'BOX1'); P := GetIfaceStatus();end;~;
		~ IF ((box = 2) and (P <> CONNECT_OK)) then begin ConnectToVMEx(MG, BOX, '.', 'BOX2'); P := GetIfaceStatus();end;~;
		~ IF ((box = 3) and (P <> CONNECT_OK)) then begin ConnectToVMEx(MG, BOX, '.', 'BOX3'); P := GetIfaceStatus();end;~;
		~ IF ((box = 4) and (P <> CONNECT_OK)) then begin ConnectToVMEx(MG, BOX, '.', 'BOX4'); P := GetIfaceStatus();end;~;
		IF (P = G(^G_CamUnconnectedState)) [@UNCON, @OTHER]
			 @UNCON: SHOW 26, Video Unconnected,0 ---> SX
             @OTHER: IF (P = G(^G_CamConnectOkState)) [@CONNECTED, @OTHER2]
                @CONNECTED: SHOW 26, Video OK,0 ---> SX
                @OTHER2: IF (P = G(^G_CamConnectFailState)) [@FAIL, @OTHER3]
                   @FAIL:   SHOW 26, Video Failed,0 ---> SX
                   @OTHER3: SHOW 26, Video Unknown,0  ---> SX
\\\</state>
\\\</stateset>

\\\<stateset id="25" summary="Experiment timer - check if experiment has reached maximum duration">
S.S.25,
\\\<state id="1" summary="Wait for start trigger">
S1,
	#START:;
		---> S2
\\\<state id="2" summary="Every cycle, check if max duration of experiment reached">
\\\</state>
S2,
	#K^KP_ExperimentEnd:;
				SHOW 5, Manually terminated, 0;
				---> S3
	0.01":;
		SHOW 1, Remaining Time (m.s), ((G(^G_MaxDuration) - (J(^J_CurrentHours) * 60) - J(^J_CurrentMinutes)) - ((J(^J_CurrentSeconds) + 40) / 100));
		IF L >= G(^G_MaxDurationMsec) [@hit max time]
			@hit max time:;
				SHOW 5, Max Time Reached, 0;
				---> S3
\\\</state>
\\\<state id="3" summary="Trigger a ZP_ExperimentEnd every 10ms - this will make sure that everything receives it even">
S3,
	0.01":;
		Z^ZP_ExperimentEnd;
		---> SX
\\\</state>
\\\</stateset>

\\\</program>
