\\\<?xml version="1.0" encoding="utf-8" standalone="yes"?>
\\\<?xml-stylesheet type="text/xsl" href="comments.xsl"?>
\\\
\\\<program>
\\\<title>Training Paradigm Code - Antonio Paolini&quot;s 2008 third-year research group</title>
\\\<history>
\\\ <revision number="1.0">
\\\  <author>Simeon Morgan &lt;smorgan@students.latrobe.edu.au&gt;</author>
\\\  <created>2008-04-10 22:17</created>
\\\  <summary>First version</summary>
\\\ </revision>
\\\</history>

Y2KCOMPLIANT \\\Force use of 4-digit year


\\\<constant group="general" represents="parameter" name="Def_MaxDuration" summary="Default maximum duration (in minutes) for program to run"></constant>
^Def_MaxDuration = 100
\\\<constant group="general" represents="parameter" name="Abs_MaxTrials" summary="Limit on maximum number of trials to be recorded/processed"></constant>
^Abs_MaxTrials = 10000
\\\<constant group="general" represents="parameter" name="Def_InterToneDelay" summary="Default Time (in ms) between presentation of first and second tones"></constant>
^Def_InterToneDelay = 500
\\\<constant group="general" represents="parameter" name="Def_PreToneDelay" summary="Default Time (in ms) between starting lever trigger and first tone presentation."></constant>
^Def_PreToneDelay = 500

\\\<array name="G" outputName="Configuration" outputStyle="cols" summary="">
DIM G = 17
\\\<column name="G_MatchLever" outputName="Correct Lever" summary="Which lever is correct for a match (Left=0  Right=1)"></column>
^G_MatchLever = 0
\\\<column name="C_MaxDuration" outputName="Max Duration" summary="Maximum time before automatic termination (minutes)"></column>
^G_MaxDuration = 1
\\\<column name="G_InterToneDelay" outputName="Inter-tone delay" summary="Time (in ms) between presentation of first and second tones"></column>
^G_InterToneDelay = 2
\\\<column name="G_InterToneDelaySec" summary="Time (in s) between presentation of first and second tones. Autogenerated."></column>
^G_InterToneDelaySec = 3
\\\<column name="G_PreToneDelay" outputName="Pre-tone delay" summary="Time (in ms) between starting lever trigger and first tone presentation."></column>
^G_PreToneDelay = 4
\\\<column name="G_PreToneDelaySec" summary="Time (in s) between starting lever trigger and first tone presentation. Autogenerated."></column>
^G_PreToneDelaySec = 5
\\\<column name="G_SndBurstDurationSec" outputName="Tone duration" summary="Duration of sound burst in s"></column>
^G_SndBurstDurationSec = 6
\\\<column name="G_CamUnconnectedState" summary="Used to store 'Unconnected' StateID of camera"></column>
^G_CamUnconnectedState = 7
\\\<column name="G_CamConnectOkState" summary="Used to store 'Ok' StateID of camera"></column>
^G_CamConnectOkState = 8
\\\<column name="G_CamConnectFailState" summary="Used to store 'Fail' StateID of camera"></column>
^G_CamConnectFailState = 9
\\\<column name="G_LeverExtensionStatus" summary="Lever-extension status"></column>
^G_LeverExtensionStatus = 10
\\\<column name="G_MatchOrMismatch" summary="Whether trial is a match or mismatch trial"></column>
^G_MatchOrMismatch = 11
\\\<column name="G_UltrasonicIndexOffset" summary="Array offset for ultrasonic time recording"></column>
^G_UltrasonicIndexOffset = 12
\\\<column name="G_USSequentialReadingA" summary="Number of sequential ultrasonic detections A"></column>
^G_USSequentialReadingsA = 13
\\\<column name="G_USEventIndexA" summary="Index of current event for ultrasonic A"></column>
^G_USEventIndexA = 14
\\\<column name="G_USSequentialReadingB" summary="Number of sequential ultrasonic detections B"></column>
^G_USSequentialReadingsB = 15
\\\<column name="G_USEventIndexB" summary="Index of current event for ultrasonic B"></column>
^G_USEventIndexB = 16
\\\<column name="C_MaxDurationMsec" summary="Maximum time before automatic termination in msec (autogenerated)"></column>
^G_MaxDurationMsec = 17
\\\</array>

\\\Control Variables 
\\\<!--<variable alias="" name="" summary=""></variable>-->
\\\<variable alias="Maximum Duration" name="C(^C_MaxDuration)" summary="Maximum time before automatic termination"></variable>
Var_Alias Maximum Time (minutes)			= G(1)
\\\<variable alias="Inter-tone Delay" name="G(^G_InterToneDelay)" summary="Time (in ms) between presentation of first and second tones"></variable>
Var_Alias Inter-tone delay (ms)				= G(2)
\\\<variable alias="Pre-tone Delay" name="G(^G_PreToneDelay)" summary="Time (in ms) between starting lever trigger and first tone presentation"></variable>
Var_Alias Pre-tone delay (ms)				= G(4)


\\\Example comment line <!--<constant represents="input|output|other" name="LeverTrigger" summary="Input ID of the fixed lever 'starting' trigger"></constant>-->

\\\Constant block
\\\<input name="Inp_HeadEntry" summary="Input ID of the head entry unit on pellet dispenser"></input>
^Inp_HeadEntry = 1
\\\<input name="Inp_Lickometer" summary="Input ID of the lickometer"></input>
^Inp_Lickometer = 2
\\\<input name="Inp_LeverTrigger" summary="Input ID of the fixed lever 'starting' trigger"></input>
^Inp_LeverTrigger = 3
\\\<input name="Inp_LeverInputLeft" summary="Input ID of retractable lever on the left"></input>
^Inp_LeverInputLeft = 4
\\\<input name="Inp_LeverInputRight" summary="Input ID of retractable lever on the right"></input>
^Inp_LeverInputRight = 5
\\\<input name="Inp_UltrasonicA" summary="Input ID of ultrasonic input 1 of 2"></input>
^Inp_UltrasonicA = 6
\\\<input name="Inp_UltrasonicB" summary="Input ID of ultrasonic input 2 of 2"></input>
^Inp_UltrasonicB = 7

\\\<output name="Out_PelletDispenser" summary="Output ID of feeder unit."><use>Dispenses on OFF->ON transition</use></output>
^Out_PelletDispenser = 1
\\\<output name="Out_LiquidDispenser" summary="Output ID of drinking unit."><use>Toggle liquid availability: OFF->Unavailable, ON->Available</use></output>
^Out_LiquidDispenser = 2
\\\<output name="Out_LeftLeverRetract" summary="Output trigger to extend/retract left lever"><use>Toggle extended state of lever; OFF->Not extended, ON->Extended</use></output>
^Out_LeftLeverRetract = 3
\\\<output name="Out_RightLeverRetract" summary="Output trigger to extend/retract right lever"><use>Toggle extended state of lever; OFF->Not extended, ON->Extended</use></output>
^Out_RightLeverRetract = 4
\\\<output name="Out_LickShockSwitch" summary="Output ID of ENV-250A Contact Lickometer switching unit."><use>OFF->Lickometer active, ON->Floor connected to shock emitter</use></output>
^Out_LickShockSwitch = 5
\\\<output name="Out_Ultrasonic" summary="Output ID of ultrasonic recording unit."><use>???</use></output>
^Out_Ultrasonic = 6
\\\<output name="Out_ShockEmitter" summary="Output ID of shock unit."><use>Toggle shock delivery: OFF->No shock presently being delivered, ON->CONTINUOUS SHOCK PRESENTLY BEING DELIVERED</use></output>
^Out_ShockEmitter = 7
\\\<output name="Out_HouseLightRear" summary="Output ID of rear-most house light."><use>OFF->unlit, ON->lit</use></output>
^Out_HouseLightRear = 9
\\\<output name="Out_HouseLightMid" summary="Output ID of miidle house light."><use>OFF->unlit, ON->lit</use></output>
^Out_HouseLightMid = 10
\\\<output name="Out_HouseLightFront" summary="Output ID of front-most house light."><use>OFF->unlit, ON->lit</use></output>
^Out_HouseLightFront = 11
\\\<output name="Out_LedRed" summary="Output ID of Red LED (rearmost)."><use>OFF->unlit, ON->lit</use></output>
^Out_LedRed = 12
\\\<output name="Out_LedGreen" summary="Output ID of Green LED (frontmost)."><use>OFF->unlit, ON->lit</use></output>
^Out_LedGreen = 13
\\\<output name="Out_LedYellow" summary="Output ID of Yellow LED (middle)."><use>OFF->unlit, ON->lit</use></output>
^Out_LedYellow = 14

\\\<constant group="audio" represents="delta" name="Snd_SPIncrement (not in use)" summary="Size of increment in sound pressure (in dB)"></constant>
^Snd_SPIncrement = 10
\\\<constant group="audio" represents="delta" name="Snd_FreqIncrement" summary="Size of increment in sound frequency (in Hz)"></constant>
^Snd_FreqIncrement = 1000
\\\<constant group="audio" represents="parameter" name="Snd_ToneBurstDuration" summary="Duration of the burst of sound (in ms)"></constant>
^Snd_ToneBurstDuration = 1000
\\\<constant group="audio" represents="parameter" name="Snd_InterBurstDuration" summary="Duration of pause between sound bursts (in ms)"></constant>
^Snd_InterBurstDuration = 2000
\\\<constant group="audio" represents="parameter" name="Snd_SP" summary="Sound pressure at which to present tones (in dB)"></constant>
^Snd_SP = 75
\\\<constant group="audio" represents="parameter" name="Snd_RiseFallTime" summary="Rise/Fall time (in ms)"></constant>
^Snd_RiseFallTime = 10
\\\<constant group="audio" represents="parameter" name="Snd_PreToneDelay" summary="Delay between trigger and first tone presentation (in ms)"></constant>
^Snd_PreToneDelay = 1000

\\\<constant group="shock" represents="parameter" name="Shk_IncorrectShockDuration" summary="Duration of the electrical shock for an incorrect response (in ms)"></constant>
^Shk_IncorrectShockDuration = 500

\\\<constant group="levers" represents="parameter" name="Lvr_RetractDelay" summary="Time (in s) to wait for levers to extend and retract"></constant>
^Lvr_RetractDelay = 2

\\\<constant group="k-pulse" represents="parameter" name="KP_ExperimentEnd" summary="Trigger the experiment to end"></constant>
^KP_ExperimentEnd = 1

\\\<constant group="z-pulse" represents="parameter" name="ZP_TerminateExperiment" summary="End the experiment - may be used if error occurrs"></constant>
^ZP_TerminateExperiment = 1

\\\<constant group="z-pulse" represents="parameter" name="ZP_StartVideoRec" summary="Start video recording"></constant>
^ZP_StartVideoRec = 2
\\\<constant group="z-pulse" represents="parameter" name="ZP_EndVideoRec" summary="End video recording"></constant>
^ZP_EndVideoRec = 3

\\\<constant group="z-pulse" represents="parameter" name="ZP_ExtendSipper" summary="Trigger extend sipper; set S for max # of sips before retraction"></constant>
^ZP_ExtendSipper = 4
\\\<constant group="z-pulse" represents="parameter" name="ZP_SipperLimitHit" summary="Triggers when the sipper limit is hit; if S less than 0 then never triggered."></constant>
^ZP_SipperLimitHit = 5
\\\<constant group="z-pulse" represents="parameter" name="ZP_RetractSipper" summary="Trigger sipper retract, regardless of whether sipper limit hit"></constant>
^ZP_RetractSipper = 6

\\\<constant group="z-pulse" represents="parameter" name="ZP_GivePellet" summary="Trigger pellet reward"></constant>
^ZP_GivePellet = 7

\\\<constant group="z-pulse" represents="parameter" name="ZP_ExperimentEnd" summary="Trigged to end the experiment"></constant>
^ZP_ExperimentEnd = 8



\\\ARRAYS
\\\<array name="J" outputName="Trials overview" outputStyle="cols" summary="Trial summary data">
DIM J = 7
\\\<column name="J_CompletedTrials" outputName="Completed trials" summary="Total number of trials that have occurred so far"></column>
^J_CompletedTrials = 0
\\\<column name="J_TotalMatchTrials" outputName="Matched tone pairs" summary="Total number of trials that have occurred with matched frequency"></column>
^J_TotalMatchTrials = 1
\\\<column name="J_TotalMismatchTrials" outputName="Mismatched tone pairs" summary="Total number of trials that have occurred with unmatched frequency"></column>
^J_TotalMismatchTrials = 2
\\\<column name="J_CurrentHours" outputName="Duration hours" summary="Hours since commencement (for H:M:S.MS)"></column>
^J_CurrentHours = 3
\\\<column name="J_CurrentMinutes" outputName="Duration minutes" summary="Minutes since commencement (for H:M:S.MS)"></column>
^J_CurrentMinutes = 4
\\\<column name="J_CurrentSeconds" outputName="Duration seconds" summary="Seconds since commencement (for H:M:S.MS)"></column>
^J_CurrentSeconds = 5
\\\<column name="J_CurrentMilliseconds" outputName="Duration milliseconds" summary="Milliseconds since commencement (for H:M:S.MS) "></column>
^J_CurrentMilliseconds = 6
\\\<column name="J_LickTrials" outputName="Trials with licks" summary="Number of rewarded trials where licks have been taken"></column>
^J_LickTrials = 7
\\\</array>

\\\<array name="K" outputName="Trials" outputStyle="rows" summary="Specific trial data">
DIM K = 60000 \ we wish it could be (^Gen_MaxTrials * 6) - 1
\\\<column name="K_TrialNumber" outputName="Trial" summary="Number of this trial"></column>
^K_TrialNumber = 0
\\\<column name="K_TrialTimeHour" outputName="hour" summary="Time post-commencement (H) this trial occurred"></column>
^K_TrialTimeHour = 1
\\\<column name="K_TrialTimeMinute" outputName="minute" summary="Time post-commencement (M) this trial occurred"></column>
^K_TrialTimeMinute = 2
\\\<column name="K_TrialTimeSecond" outputName="second" summary="Time post-commencement (S) this trial occurred"></column>
^K_TrialTimeSecond = 3
\\\<column name="K_TrialTimeMillisecond" outputName="millisecond" summary="Time post-commencement (MS) this trial occurred"></column>
^K_TrialTimeMillisecond = 4
\\\<column name="K_TrialMsec" outputName="Msec from start" summary="Time post-commencement (msec) this trial occurred TOTAL - Not related to H:M:S"></column>
^K_TrialMsec = 5
\\\<column name="K_Frequency1" outputName="First Frequency" summary="Frequency of first tone presented"></column>
^K_Frequency1 = 6
\\\<column name="K_Frequency2" outputName="Second frequency" summary="Frequency of second tone presented"></column>
^K_Frequency2 = 7
\\\<column name="K_SP1" outputName="First-tone SPL" summary="Sound Pressure of first tone presented (not in use)"></column>
^K_SP1 = 8
\\\<column name="K_SP2" outputName="Second-tone SPL" summary="Sound Pressure of second tone presented (not in use)"></column>
^K_SP2 = 9
\\\<column name="K_LickCount" outputName="Lick Count" summary="Number of licks taken"></column>
^K_LickCount = 10
\\\<column name="K_FirstLickDelay" outputName="First-lick delay" summary="Time (in msec) before first lick; -1 = NA"></column>
^K_FirstLickDelay = 11
\\\</array>
\\\<constant group="general" represents="parameter" name="K_TrialIndexMultiplier" summary="Multiplier to be used for each trial"></constant>
^K_TrialIndexMultiplier = 12

\\\<array name="H" outputName="Ultrasonics" outputStyle="rows" summary="Ultrasonic signal data">
DIM H = 60000 
\\\<column name="H_StartHour" outputName="Start hour" summary="Hour of this event starting"></column>
\^H_StartHour = 0
\\\<column name="H_StartMinute" outputName="Start minute" summary="Minute of this event starting"></column>
\^H_StartMinute = 1
\\\<column name="H_StartSecond" outputName="Start second" summary="Second of this event starting"></column>
\^H_StartSecond = 2
\\\<column name="H_StartMillisecond" outputName="Start millisecond" summary="Millisecond of this event starting"></column>
\^H_StartMillisecond = 3
\\\<column name="H_StartMsec" outputName="Start Msec (absolute)" summary="Absolute milliseconds of this event starting"></column>
\^H_StartMsec = 4
\\\<column name="H_EndHour" outputName="End hour" summary="Hour of this event ending"></column>
\^H_EndHour = 5
\\\<column name="H_EndMinute" outputName="End minute" summary="Minute of this event ending"></column>
\^H_EndMinute = 6
\\\<column name="H_EndSecond" outputName="End second" summary="Second of this event ending"></column>
\^H_EndSecond = 7
\\\<column name="H_EndMillisecond" outputName="End millisecond" summary="Millisecond of this event ending"></column>
\^H_EndMillisecond = 8
\\\<column name="H_EndMsec" outputName="End Msec (absolute)" summary="Absolute milliseconds of this event ending"></column>
\^H_EndMsec = 9
\\\<column name="H_Band" outputName="Frequency band" summary="Which band led to the trigger"></column>
\^H_Band = 10
\\\</array>
\\\<constant group="general" represents="parameter" name="H_IndexMultiplier" summary="Multiplier to be used for each signal"></constant>
^H_IndexMultiplier = 11


\\\<array name="D" summary="List of first-tone frequency of pairs to be tested, generated pre-start from supplied list of frequencies">
DIM D = 10000
\\\<column name="DE_ToneFrequency" summary="Tone frequency being presented first in the pair"></column>
^DE_ToneFrequency = 0
\\\</array>

\\\<array name="E" summary="List of second-tone frequency of pairs to be tested, generated pre-start from supplied list of frequencies">
DIM E = 10000
\\\<column name="DE_ToneFrequency" summary="Tone frequency being presented second in the pair"></column>
\\\</array>

\\\<array name="F" summary="Integer list (0x0-32x32) representing available tone combinations - used with RANDD to step through tone combinations randomly">
LIST F = 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23 \,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39 \,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,
\	 101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179 \,180,181,182,183,184,185,186,187,188,189,190 ,191,192,193,194,195,196,197,198,199,200,
\	 201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,
\	 301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,
\	 401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,
\	 501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,
\	 601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,
\	 701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,
\	 801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,
\	 901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,
\	 1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,
\	 1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,
\	 1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,
\	 1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,
\	 1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,1431,1432,1433,1434,1435,1436,1437,1438,1439,1440,1441,1442,1443,1444,1445,1446,1447,1448,1449,1450,1451,1452,1453,1454,1455,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1476,1477,1478,1479,1480,1481,1482,1483,1484,1485,1486,1487,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,
\	 1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,1515,1516,1517,1518,1519,1520,1521,1522,1523,1524,1525,1526,1527,1528,1529,1530,1531,1532,1533,1534,1535,1536,1537,1538,1539,1540,1541,1542,1543,1544,1545,1546,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556,1557,1558,1559,1560,1561,1562,1563,1564,1565,1566,1567,1568,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,1595,1596,1597,1598,1599,1600,
\	 1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,1619,1620,1621,1622,1623,1624,1625,1626,1627,1628,1629,1630,1631,1632,1633,1634,1635,1636,1637,1638,1639,1640,1641,1642,1643,1644,1645,1646,1647,1648,1649,1650,1651,1652,1653,1654,1655,1656,1657,1658,1659,1660,1661,1662,1663,1664,1665,1666,1667,1668,1669,1670,1671,1672,1673,1674,1675,1676,1677,1678,1679,1680,1681,1682,1683,1684,1685,1686,1687,1688,1689,1690,1691,1692,1693,1694,1695,1696,1697,1698,1699,1700,
\	 1701,1702,1703,1704,1705,1706,1707,1708,1709,1710,1711,1712,1713,1714,1715,1716,1717,1718,1719,1720,1721,1722,1723,1724,1725,1726,1727,1728,1729,1730,1731,1732,1733,1734,1735,1736,1737,1738,1739,1740,1741,1742,1743,1744,1745,1746,1747,1748,1749,1750,1751,1752,1753,1754,1755,1756,1757,1758,1759,1760,1761,1762,1763,1764,1765,1766,1767,1768,1769,1770,1771,1772,1773,1774,1775,1776,1777,1778,1779,1780,1781,1782,1783,1784,1785,1786,1787,1788,1789,1790,1791,1792,1793,1794,1795,1796,1797,1798,1799,1800,
\	 1801,1802,1803,1804,1805,1806,1807,1808,1809,1810,1811,1812,1813,1814,1815,1816,1817,1818,1819,1820,1821,1822,1823,1824,1825,1826,1827,1828,1829,1830,1831,1832,1833,1834,1835,1836,1837,1838,1839,1840,1841,1842,1843,1844,1845,1846,1847,1848,1849,1850,1851,1852,1853,1854,1855,1856,1857,1858,1859,1860,1861,1862,1863,1864,1865,1866,1867,1868,1869,1870,1871,1872,1873,1874,1875,1876,1877,1878,1879,1880,1881,1882,1883,1884,1885,1886,1887,1888,1889,1890,1891,1892,1893,1894,1895,1896,1897,1898,1899,1900,
\	 1901,1902,1903,1904,1905,1906,1907,1908,1909,1910,1911,1912,1913,1914,1915,1916,1917,1918,1919,1920,1921,1922,1923,1924,1925,1926,1927,1928,1929,1930,1931,1932,1933,1934,1935,1936,1937,1938,1939,1940,1941,1942,1943,1944,1945,1946,1947,1948,1949,1950,1951,1952,1953,1954,1955,1956,1957,1958,1959,1960,1961,1962,1963,1964,1965,1966,1967,1968,1969,1970,1971,1972,1973,1974,1975,1976,1977,1978,1979,1980,1981,1982,1983,1984,1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2000,
\	 2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015
\\\<column name="F_ToneConfigNumber" summary="Tone Configuration Number"></column>
\\\</array>

\\\<array name="I" summary="Integer list representing reward Z-values for reward delivery">
LIST I = 2
\\\TODO <column name="F_ToneConfigNumber" summary="Tone Configuration Number"></column>
\\\</array>

\\\<!--<array name="B" summary="">
\\\<column name="J_IncorrectMismatchTrials" summary="Incorrect number of trials that have occurred with unmatched frequency"></column>
\\\</array>-->

\\\LISTS
\\\<list name="Z" summary="List of frequencies available to test"></list>
LIST Z = 2000, 10000, 24000, 35000
^FrequencyCount = 4

\\\Variable declarations
\\\<!--<variable name="" summary=""></variable>-->

\\\<enum name="G_MatchOrMismatch" summary="Whether trial is a match or mismatch trial">
\\\\<option value="0" name="^G_MatchOrMismatch_Unset" summary="'Unset' state - if found in comparison, a problem has occurred"></option>
^G_MatchOrMismatch_Unset = 0
\\\\<option value="1" name="^G_MatchOrMismatch_Match" summary="The two presented tones are a match"></option>
^G_MatchOrMismatch_Match = 1
\\\\<option value="2" name="^G_MatchOrMismatch_Mismatch" summary="The two presented tones are a mismatch"></option>
^G_MatchOrMismatch_Mismatch = 2
\\\</enum>

\\\<variable name="P" summary="Storage variable for camera state"></variable>
\\\<variable name="Q" summary="Current offset for B array"></variable>
\\\<variable name="S" summary="Number of sips remaining before sipper retract - set before using ZP_ExtendSipper"></variable>
\\\<variable name="T" summary="Index of frequency pair to be used"></variable>
\\\<variable name="U" summary="ID for reward to be given"></variable>
\\\<variable name="W" summary="Iterator for building frequeny arrays"></variable>
\\\<variable name="X" summary="Iterator for building frequeny arrays"></variable>
\\\<variable name="Y" summary="Iterator for building frequeny arrays"></variable>

\\\<variable name="V" summary="Temporary store for shuffling data to sound processor"></variable>

\\\<variable name="L" summary="Timer - # of msec since commencement"></variable>
\\\<variable name="M" summary="Timer - variable swapping 1"></variable>
\\\<variable name="N" summary="Timer - variable swapping 2"></variable>

\\\<stateset id="1" summary="Run the preparation and termination functions of the program">
S.S.1,
\\\<state id="1" summary="Set variables to default values">
S1,
	0":;
		SET G(^G_MaxDuration) = ^Def_MaxDuration;
		SET G(^G_InterToneDelay) = ^Def_InterToneDelay;
		SET G(^G_PreToneDelay) = ^Def_PreToneDelay;
		SET G(^G_SndBurstDurationSec) = (^Snd_ToneBurstDuration / 1000) * 1";

		SET W = 0;
		SET X = 0;
		SET Y = 0;
		SET Q = 0;

		~InitANL926;~;
		SET V = ^Snd_SP;
		~SetAmp(MG, BOX, V);~;
		SET V = ^Snd_RiseFallTime;
		~SetRF(MG, BOX, V);~;
		SET V = ^Snd_ToneBurstDuration;
		~SetDur(MG, BOX, V);~;

		SET K(0) = -987.987; \set the start of the array as the end - this means when it terminates it will not leave enormous arrays
		SET H(0) = -987.987;

			---> S2

\\\</state>
\\\<state id="2" summary="Generate the arrays of all possible tone combinations (D, E) which can be randomly selected from during tests.">
S2,
	0":;
		IF Y >= ^FrequencyCount [@Array Complete,@Array Incomplete]
			@Array Complete:;
				SET X = 0, Y = 0;
				---> S3
			@Array Incomplete:;
				SET D(W) = Z(Y);
				SET E(W) = Z(X);
				ADD W;
				IF X >= (^FrequencyCount - 1) [@Finished pass,@Unfinished pass]
					@Finished pass:;
						SET X = 0;
						ADD Y;
						---> SX
					@Unfinished pass:;
						ADD X;
						---> SX

\\\</state>
\\\<state id="3" summary="Generate the arrays of all possible tone combinations (D, E) which can be randomly selected from during tests.">
S3,
	0":;
		IF Y >= ^FrequencyCount [@Array Complete,@Array Incomplete]
			@Array Complete:;
				SET D(W) = -987.987;
				SET E(W) = -987.987;
				---> S9
			@Array Incomplete:;
				SET D(W) = Z(Y);
				SET E(W) = Z(Y);
				ADD W;
				IF X >= (^FrequencyCount - 3) [@Finished pass,@Unfinished pass]
					@Finished pass:;
						SET X = 0;
						ADD Y;
						---> SX
					@Unfinished pass:;
						ADD X;
						---> SX


\\\</state>
\\\<state id="9" summary="Pause until start command is issued; then convert used-data from ms to sec where required and continue. Presumably variables are set when start is triggered.">
S9,
	#START:;
		SHOW 5, Running, 0;
		Z^ZP_StartVideoRec;
		ON ^Out_HouseLightRear;
		SET G(^G_InterToneDelaySec) = ((^Snd_ToneBurstDuration / 1000) + (G(^G_InterToneDelay) / 1000)) * 1";
		SET G(^G_PreToneDelaySec) = (G(^G_PreToneDelay) / 1000) * 1";
		SET G(^G_MaxDurationMsec) = G(^G_MaxDuration) * 60000; \convert minutes to milliseconds
		Z^ZP_StartVideoRec;
		---> S10
	0.01":;
		SHOW 1, Max duration, G(^G_MaxDuration);
\		SHOW 2, Time Remaining, G(^G_MaxDuration);
		SHOW 2, Completed Trials, 0;
		SHOW 5, Awaiting start, 0;
		---> SX
\\\</state>
\\\<state id="10" summary="Wait for program termination">
S10,
	#Z^ZP_TerminateExperiment:;
		SET K(Q + ^K_TrialIndexMultiplier) = -987.987;
		SET H(G(^G_UltrasonicIndexOffset)) = -987.987;
		---> S20

\\\</state>
\\\<state id="10" summary="Turn off all outputs, save data and end">
S20,   
  0":;
	OFF ^Out_HouseLightRear;
	SHOW 5, Experiment finished, 1;	
  	---> STOPABORTFLUSH
\\\</state>
\\\</stateset>


\\\<stateset id="2" summary="Operate the experiment functionally ">
S.S.2,
\\\<state id="1" summary="Wait for the start trigger">
S1,
	#START:;
		---> S2
\\\</state>
\\\<state id="2" summary="Wait for lever 1 press, then identify correct/incorrect levers and move to present tones">
S2,
	#R^Inp_LeverTrigger:;
		SET Q = J(^J_CompletedTrials) * ^K_TrialIndexMultiplier;
		SET K(Q + ^K_TrialIndexMultiplier) = -987.987; \set array end to be after the current trial
		SET K(Q + ^K_TrialTimeHour) = J(^J_CurrentHours), K(Q + ^K_TrialTimeMinute) = J(^J_CurrentMinutes), K(Q + ^K_TrialTimeSecond) = J(^J_CurrentSeconds), K(Q + ^K_TrialTimeMillisecond) = J(^J_CurrentMilliseconds);
		SET K(Q + ^K_TrialMsec) = L;
		SET K(Q + ^K_FirstLickDelay) = -1; \\set to no licks taken

		RANDD T = F;
		SET K(Q + ^K_TrialNumber) = J(^J_CompletedTrials) + 1;
		SET K(Q + ^K_Frequency1) = D(T);
		SET K(Q + ^K_Frequency2) = E(T);
		SET K(Q + ^K_SP1) = ^Snd_SP;
		SET K(Q + ^K_SP2) = ^Snd_SP;

		SHOW 21, Trial Number, J(^J_CompletedTrials) + 1;
		SHOW 23, First Tone, D(T);
		SHOW 24, Second Tone, E(T);


		IF D(T) = E(T) [@SameTonesPresented, @DifferentTonesPresented]
			@Same Tones:;
				SET G(^G_MatchOrMismatch) = ^G_MatchOrMismatch_Match;
				SHOW 22, Match Trial, 0;
					---> S6
			@Different Tones:;
				SET G(^G_MatchOrMismatch) = ^G_MatchOrMismatch_Mismatch;
				SHOW 22, Mismatch Trial, 0;
					---> S6

	#Z^ZP_ExperimentEnd:;
		Z^ZP_TerminateExperiment;
		---> S32
\\\</state>
\\\<state id="6" summary="Pause for pre-delay then play first sound">
S6,
	G(^G_PreToneDelaySec)#T:;
		SET V = D(T);
		~OnFreq(MG, BOX, V);~;
		---> S7

\\\</state>
\\\<state id="7" summary="Pause for inter-tone delay then play second sound">
S7,
	G(^G_InterToneDelaySec)#T:;
		SET V = E(T);
		~OnFreq(MG, BOX, V);~;
		---> S8
\\\</state>
\\\<state id="8" summary="Wait the duration of the tone, then start timer and commence test">
S8,
	G(^G_SndBurstDurationSec)#T:;
		RANDD U = I;
		IF U = 1 [@Sipper reward, @Pellet reward]
			@Sipper reward:;
				SET S = -1; \\set number of licks to unlimited
				Z^ZP_ExtendSipper;
				---> S18
			@Pellet reward:;
				Z^ZP_GivePellet;
				---> S16
\\\</state>
\\\<state id="16" summary="Delay after pellet reward">
S16,
	5":;
		---> S25
\\\</state>
\\\<state id="18" summary="Retract water unit">
S18,
	5":;
		Z^ZP_RetractSipper;
		---> S25
\\\</state>
\\\<state id="25" summary="Update trial data">
S25,
	0":;
		ADD J(^J_CompletedTrials);
		IF G(^G_MatchOrMismatch) = ^G_MatchOrMismatch_Match [@match, @presumed mismatch]
			@match:;
				ADD J(^J_TotalMatchTrials);
				---> S26
			@mismatch:;
				ADD J(^J_TotalMismatchTrials);
				---> S26
\\\</state>
\\\<state id="26" summary="Write trial summary data. Reset variables. Check if experiment is complete - if so, issue termination command">
S26,
	0":;
		SHOW 2, Completed Trials,  J(^J_CompletedTrials);
		SHOW 3, Lick Trials,  J(^J_LickTrials);
		SHOW 6, Matched Trials, J(^J_TotalMatchTrials);
		SHOW 7, Mismatched Trials, J(^J_TotalMismatchTrials);

		IF L >= G(^G_MaxDurationMsec) [@hit max time, @less than max time]
			@hit max:;
				Z^ZP_TerminateExperiment;
				---> S32
			@less than max:;
				---> S2
\\\</state>
\\\</stateset>

\\\<stateset id="7" summary="Timer - counts up in msec (in steps of 10 msec)">
S.S.7,
\\\<state id="1" summary="Wait for start trigger">
S1,
	#START:;
		---> S2
\\\<state id="2" summary="Increment counter, hour, minutes, seconds, milliseconds">
\\\</state>
S2,
	#Z^ZP_TerminateExperiment:;
		---> S32
	0.01":;
		SET L = L + 10;
		SET J(^J_CurrentMilliseconds) = J(^J_CurrentMilliseconds) + 10;
		SET M = J(^J_CurrentMilliseconds), N = J(^J_CurrentSeconds);
		~ IF (M = 1000) then begin M := 0; N := N + 1; end; ~;
		SET J(^J_CurrentMilliseconds) = M, M = N, N = J(^J_CurrentMinutes);
		~ IF (M = 60) then begin M := 0; N := N + 1; end; ~;
		SET J(^J_CurrentSeconds) = M, M = N, N = J(^J_CurrentHours);
		~ IF (M = 60) then begin M := 0; N := N + 1; end; ~;
		SET J(^J_CurrentMinutes) = M, J(^J_CurrentHours) = N;
		SHOW 16, Hours, J(^J_CurrentHours);
		SHOW 17, Minutes, J(^J_CurrentMinutes);
		SHOW 18, Seconds, J(^J_CurrentSeconds);
		SHOW 19, Milliseconds, J(^J_CurrentMilliseconds);
			---> SX
\\\</state>
\\\</stateset>

\\\<stateset id="9" summary="Camera management - connect to camera system and start/stop video">
S.S.9,
\\\<state id="1" summary="Set constants for video connection state">
S1,
	0":;
		~P := UNCONNECTED;~;
		SET G(^G_CamUnconnectedState) = P;
        ~P := CONNECT_OK;~;
		SET G(^G_CamConnectOkState) = P;
        ~P := CONNECT_FAIL;~;
		SET G(^G_CamConnectFailState) = P;
		---> S2
\\\</state>
\\\<state id="2" summary="Wait for video commands">
S2,
	#Z^ZP_StartVideoRec:;
		~ IF ((box = 1) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX1', StartSavingEvent, 'StartEvent'); end; ~;
		~ IF ((box = 2) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX2', StartSavingEvent, 'StartEvent'); end; ~;
		~ IF ((box = 3) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX3', StartSavingEvent, 'StartEvent'); end; ~;
		~ IF ((box = 4) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX4', StartSavingEvent, 'StartEvent'); end; ~;
		---> SX
	#Z^ZP_EndVideoRec:;
		~ IF ((box = 1) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX1', StopSavingEvent, 'StopEvent'); end; ~;
		~ IF ((box = 2) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX2', StopSavingEvent, 'StopEvent'); end; ~;
		~ IF ((box = 3) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX3', StopSavingEvent, 'StopEvent'); end; ~;
		~ IF ((box = 4) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX4', StopSavingEvent, 'StopEvent'); end; ~;
		---> SX
	#Z^ZP_TerminateExperiment:;
		~ IF ((box = 1) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX1', StopSavingEvent, 'StopEvent'); end; ~;
		~ IF ((box = 2) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX2', StopSavingEvent, 'StopEvent'); end; ~;
		~ IF ((box = 3) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX3', StopSavingEvent, 'StopEvent'); end; ~;
		~ IF ((box = 4) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX4', StopSavingEvent, 'StopEvent'); end; ~;

		~ IF ((box = 1) and (P = CONNECT_OK)) then begin DisconnectVM('.', 'BOX1'); O := GetIfaceStatus();end;~;
		~ IF ((box = 2) and (P = CONNECT_OK)) then begin DisconnectVM('.', 'BOX2'); O := GetIfaceStatus();end;~;
		~ IF ((box = 3) and (P = CONNECT_OK)) then begin DisconnectVM('.', 'BOX3'); O := GetIfaceStatus();end;~;
		~ IF ((box = 4) and (P = CONNECT_OK)) then begin DisconnectVM('.', 'BOX4'); O := GetIfaceStatus();end;~;
		---> S32
	0.1":;
		~ IF ((box = 1) and (P <> CONNECT_OK)) then begin ConnectToVMEx(MG, BOX, '.', 'BOX1'); P := GetIfaceStatus();end;~;
		~ IF ((box = 2) and (P <> CONNECT_OK)) then begin ConnectToVMEx(MG, BOX, '.', 'BOX2'); P := GetIfaceStatus();end;~;
		~ IF ((box = 3) and (P <> CONNECT_OK)) then begin ConnectToVMEx(MG, BOX, '.', 'BOX3'); P := GetIfaceStatus();end;~;
		~ IF ((box = 4) and (P <> CONNECT_OK)) then begin ConnectToVMEx(MG, BOX, '.', 'BOX4'); P := GetIfaceStatus();end;~;
		IF (P = G(^G_CamUnconnectedState)) [@UNCON, @OTHER]
			 @UNCON: SHOW 26, Video Unconnected,0 ---> SX
             @OTHER: IF (P = G(^G_CamConnectOkState)) [@CONNECTED, @OTHER2]
                @CONNECTED: SHOW 26, Video OK,0 ---> SX
                @OTHER2: IF (P = G(^G_CamConnectFailState)) [@FAIL, @OTHER3]
                   @FAIL:   SHOW 26, Video Failed,0 ---> SX
                   @OTHER3: SHOW 26, Video Unknown,0  ---> SX
\\\</state>
\\\</stateset>

\\\<stateset id="10" summary="Capture ultrasonic A signal times">
S.S.10,
\\\<state id="1" summary="Wait for start signal">
S1,
	#START:;
		---> S2
\\\</state>
\\\<state id="2" summary="Wait for an ultrasonic signal; 2 sequential readings of ultrasonic sound are required - otherwise counted as a 'glitch'">
S2,
	#R^Inp_UltrasonicA:;
		ADD G(^G_USSequentialReadingsA);
		IF G(^G_USSequentialReadingsA) > 1 [@above threshold, @not above threshold]
			@above threshold:;
				SET G(^G_USSequentialReadingsA) = 0;
				SET G(^G_USEventIndexA) = G(^G_UltrasonicIndexOffset);
				SET G(^G_UltrasonicIndexOffset) = G(^G_UltrasonicIndexOffset) + ^H_IndexMultiplier;
				SET H(G(^G_UltrasonicIndexOffset)) = -987.987;
				SET H(G(^G_USEventIndexA) + 0) = J(^J_CurrentHours), H(G(^G_USEventIndexA) + 1) = J(^J_CurrentMinutes), H(G(^G_USEventIndexA) + 2) = J(^J_CurrentSeconds), H(G(^G_USEventIndexA) + 3) = J(^J_CurrentMilliseconds);
				SET H(G(^G_USEventIndexA) + 4) = L;
				SET H(G(^G_USEventIndexA) + 10) = 1;
				---> S3
			@not above threshold:;
				---> SX

	#Z^ZP_TerminateExperiment:;
		---> S32

	0.02":;
		SET G(^G_USSequentialReadingsA) = 0;
		---> S2
\\\</state>
\\\<state id="3" summary="Wait until no ultrasonic signal for 20ms, then reset to 'no-ultrasonic' state">
S3,
	#R^Inp_UltrasonicA:;
		SET H(G(^G_USEventIndexA) + 5) = J(^J_CurrentHours), H(G(^G_USEventIndexA) + 6) = J(^J_CurrentMinutes), H(G(^G_USEventIndexA) + 7) = J(^J_CurrentSeconds), H(G(^G_USEventIndexA) + 8) = J(^J_CurrentMilliseconds);
		SET H(G(^G_USEventIndexA) + 9) = L;
		---> SX

	#Z^ZP_TerminateExperiment:;
		---> S32

	0.02":;
		---> S2
\\\</state>
\\\</stateset>


\\\<stateset id="11" summary="Capture ultrasonic B signal times">
S.S.11,
\\\<state id="1" summary="Wait for start signal">
S1,
	#START:;
		---> S2
\\\</state>
\\\<state id="2" summary="Wait for an ultrasonic signal; 2 sequential readings of ultrasonic sound are required - otherwise counted as a 'glitch'">
S2,
	#R^Inp_UltrasonicA:;
		ADD G(^G_USSequentialReadingsB);
		IF G(^G_USSequentialReadingsB) > 1 [@above threshold, @not above threshold]
			@above threshold:;
				SET G(^G_USSequentialReadingsB) = 0;
				SET G(^G_USEventIndexB) = G(^G_UltrasonicIndexOffset);
				SET G(^G_UltrasonicIndexOffset) = G(^G_UltrasonicIndexOffset) + ^H_IndexMultiplier;
				SET H(G(^G_UltrasonicIndexOffset)) = -987.987;
				SET H(G(^G_USEventIndexB) + 0) = J(^J_CurrentHours), H(G(^G_USEventIndexB) + 1) = J(^J_CurrentMinutes), H(G(^G_USEventIndexB) + 2) = J(^J_CurrentSeconds), H(G(^G_USEventIndexB) + 3) = J(^J_CurrentMilliseconds);
				SET H(G(^G_USEventIndexB) + 4) = L;
				SET H(G(^G_USEventIndexB) + 10) = 2;
				---> S3
			@not above threshold:;
				---> SX

	#Z^ZP_TerminateExperiment:;
		---> S32

	0.02":;
		SET G(^G_USSequentialReadingsB) = 0;
		---> S2
\\\</state>
\\\<state id="3" summary="Wait until no ultrasonic signal for 20ms, then reset to 'no-ultrasonic' state">
S3,
	#R^Inp_UltrasonicA:;
		SET H(G(^G_USEventIndexB) + 5) = J(^J_CurrentHours), H(G(^G_USEventIndexB) + 6) = J(^J_CurrentMinutes), H(G(^G_USEventIndexB) + 7) = J(^J_CurrentSeconds), H(G(^G_USEventIndexB) + 8) = J(^J_CurrentMilliseconds);
		SET H(G(^G_USEventIndexB) + 9) = L;
		---> SX

	#Z^ZP_TerminateExperiment:;
		---> S32

	0.02":;
		---> S2
\\\</state>
\\\</stateset>



\\\<stateset id="13" summary="Operate the pellet dispenser">
S.S.13,
\\\<state id="1" summary="Wait for pellet dispenser (ZP_GivePellet) to be triggered, then give pellet">
S1,
	#Z^ZP_GivePellet:;
		ON ^Out_PelletDispenser;
		---> S3
\\\</state>
\\\<state id="3" summary="Pause 2 seconds, then turn pellet dispenser output off">
S3,
	2":;
		OFF ^Out_PelletDispenser;
		---> S1
\\\</state>
\\\</stateset>



\\\<stateset id="23" summary="Operate the sipper">
S.S.23,
\\\<state id="1" summary="Wait for sipper extend (ZP_ExtendSipper) to be triggered">
S1,
	#Z^ZP_ExtendSipper:;
		OFF ^Out_LickShockSwitch; \precautionary; should already be off.
		ON ^Out_LiquidDispenser;
		IF S <= 0 [@no sip limit, @sip limit]
			@no sip limit:;
				---> S3
			@sip limit:;
				---> S5
\\\</state>
\\\<state id="3" summary="Extend sipper until ZP_RetractSipper occurs">
S3,
	#Z^ZP_RetractSipper:;
		OFF ^Out_LiquidDispenser;
		---> S1
\\\</state>
\\\<state id="5" summary="Extend sipper until ZP_RetractSipper occurs or max sips hit">
S5,
	#Z^ZP_RetractSipper:;
		OFF ^Out_LiquidDispenser;
		---> S1
	S#R^Inp_Lickometer:;
		Z^ZP_SipperLimitHit;
		OFF ^Out_LiquidDispenser;
		---> S1
\\\</state>
\\\</stateset>

\\\<stateset id="24" summary="Count sips and add to each trial">
S.S.24,
\\\<state id="1" summary="Wait for sipper extend (ZP_ExtendSipper) to be triggered">
S1,
	#Z^ZP_ExtendSipper:; \when sipper extended, start counting
				---> S2
\\\</state>
\\\<state id="2" summary="Count number of sips until retraction occurs or sipper limit hit">
S2,
	#R^Inp_Lickometer:;
		ADD K(Q + ^K_LickCount);
		IF K(Q + ^K_LickCount) = 1 [@first lick]
			@first lick:;
				SET K(Q + ^K_FirstLickDelay) = L - K(Q + ^K_TrialMsec); 
				ADD J(^J_LickTrials); \\increment the number of trials where licks were taken
		---> SX
	#Z^ZP_RetractSipper:;
		---> S1
	#Z^ZP_SipperLimitHit:;
		---> S1
\\\</state>
\\\</stateset>

\\\<stateset id="25" summary="Experiment timer - check if experiment has reached maximum duration">
S.S.25,
\\\<state id="1" summary="Wait for start trigger">
S1,
	#START:;
		---> S2
\\\<state id="2" summary="Every cycle, check if max duration of experiment reached">
\\\</state>
S2,
	#K^KP_ExperimentEnd:;
				SHOW 5, Manually terminated, 0;
				---> S3
	0.01":;
		SHOW 1, Remaining Time (m.s), ((G(^G_MaxDuration) - (J(^J_CurrentHours) * 60) - J(^J_CurrentMinutes)) - ((J(^J_CurrentSeconds) + 40) / 100));
		IF L >= G(^G_MaxDurationMsec) [@hit max time]
			@hit max time:;
				SHOW 5, Max Time Reached, 0;
				---> S3
\\\</state>
\\\<state id="3" summary="Trigger a ZP_ExperimentEnd every 10ms - this will make sure that everything receives it even">
S3,
	0.01":;
		Z^ZP_ExperimentEnd;
		---> SX
\\\</state>
\\\</stateset>

\\\</program>
