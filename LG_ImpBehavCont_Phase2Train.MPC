\\\<?xml version="1.0" encoding="utf-8" standalone="yes"?>
\\\<?xml-stylesheet type="text/xsl" href="comments.xsl"?>
\\\
\\\<program>
\\\<researcher>
\\\ <name>Lisa Guccione</name>
\\\ <email>lisa_guccione@bigpond.com</email>
\\\</researcher>
\\\<study>Impulsive Behaviour Control</study>
\\\<title>Training 2</title>
\\\<history>
\\\ <revision number="1.0">
\\\  <author>Simeon Morgan &lt;smorgan@students.latrobe.edu.au&gt;</author>
\\\  <created>2008-07-09 08:46</created>
\\\  <summary>First version</summary>
\\\ </revision>
\\\</history>

Y2KCOMPLIANT \\\Force use of 4-digit year

\\\<constant group="general" represents="parameter" name="Def_MaxTrials" summary="Default maximum number of trials for program to run"></constant>
^Def_MaxTrials = 90
\\\<constant group="general" represents="parameter" name="Abs_MaxTrials" summary="Limit on maximum number of trials to be recorded/processed"></constant>
^Abs_MaxTrials = 10000

\\\<constant group="general" represents="parameter" name="Def_RewardLicks" summary="Default number of licks for a reward"></constant>
^Def_RewardLicks = 2

\\\<constant group="general" represents="parameter" name="Lever_LeftLever" summary="Value used to represent left lever"></constant>
^Lever_LeftLever = 0
\\\<constant group="general" represents="parameter" name="Lever_RightLever" summary="Value used to represent right lever"></constant>
^Lever_RightLever = 1
\\\<constant group="general" represents="parameter" name="Lever_CentreLever" summary="Value used to represent Centre lever"></constant>
^Lever_CentreLever = 2

\\\<constant group="general" represents="parameter" name="Lights_UseHouseRear" summary="Whether to use rear house light (No=0 Yes=1)"></constant>
^Lights_UseHouseRear = 1
\\\<constant group="general" represents="parameter" name="Lights_UseHouseMid" summary="Whether to use middle house light (No=0 Yes=1)"></constant>
^Lights_UseHouseMid = 1
\\\<constant group="general" represents="parameter" name="Lights_UseHouseFront" summary="Whether to use front house light (No=0 Yes=1)"></constant>
^Lights_UseHouseFront = 1

\\\<array name="C" outputName="Configuration" summary="Operational variables - should not change over the duration of the task once set">
DIM C = 4
\\\<column name="C_MaxTrials" outputName="Max Trials" summary="Maximum time before automatic termination (minutes)"></column>
^C_MaxTrials = 0
\\\<column name="C_RewardLicks" outputName="Reward Licks" summary="Number off licks permitted for small reward"></column>
^C_RewardLicks = 1
\\\<column name="C_CamUnconnectedState" summary="Used to store 'Unconnected' StateID of camera"></column>
^C_CamUnconnectedState = 2
\\\<column name="C_CamConnectOkState" summary="Used to store 'Ok' StateID of camera"></column>
^C_CamConnectOkState = 3
\\\<column name="C_CamConnectFailState" summary="Used to store 'Fail' StateID of camera"></column>
^C_CamConnectFailState = 4
\\\</array>

\\\Control Variables 
\\\<!--<variable alias="" name="" summary=""></variable>-->
\\\<variable alias="Maximum Duration" name="C(^C_MaxTrials)" summary="Maximum trials before automatic termination"></variable>
Var_Alias Maximum Trials							= C(0)
\\\<variable alias="Reward Licks Count" name="C(^C_RewardLicks)" summary="How many licks are permitted for reward"></variable>
Var_Alias Reward Lick Count							= C(1)


\\\Example comment line <!--<constant represents="input|output|other" name="LeverTrigger" summary="Input ID of the fixed lever 'starting' trigger"></constant>-->

\\\Constant block
\\\<input name="Inp_HeadEntry" summary="Input ID of the head entry unit on pellet dispenser"></input>
^Inp_HeadEntry = 1
\\\<input name="Inp_Lickometer" summary="Input ID of the lickometer"></input>
^Inp_Lickometer = 2
\\\<input name="Inp_LeverTrigger" summary="Input ID of the fixed lever 'starting' trigger"></input>
^Inp_LeverTrigger = 3
\\\<input name="Inp_LeverInputLeft" summary="Input ID of retractable lever on the left"></input>
^Inp_LeverInputLeft = 4
\\\<input name="Inp_LeverInputRight" summary="Input ID of retractable lever on the right"></input>
^Inp_LeverInputRight = 5
\\\<input name="Inp_UltrasonicA" summary="Input ID of ultrasonic input 1 of 2"></input>
^Inp_UltrasonicA = 6
\\\<input name="Inp_UltrasonicB" summary="Input ID of ultrasonic input 2 of 2"></input>
^Inp_UltrasonicB = 7

\\\<output name="Out_PelletDispenser" summary="Output ID of feeder unit."><use>Dispenses on OFF->ON transition</use></output>
^Out_PelletDispenser = 1
\\\<output name="Out_LiquidDispenser" summary="Output ID of drinking unit."><use>Toggle liquid availability: OFF->Unavailable, ON->Available</use></output>
^Out_LiquidDispenser = 2
\\\<output name="Out_LeftLeverRetract" summary="Output trigger to extend/retract left lever"><use>Toggle extended state of lever; OFF->Not extended, ON->Extended</use></output>
^Out_LeftLeverRetract = 3
\\\<output name="Out_RightLeverRetract" summary="Output trigger to extend/retract right lever"><use>Toggle extended state of lever; OFF->Not extended, ON->Extended</use></output>
^Out_RightLeverRetract = 4
\\\<output name="Out_LickShockSwitch" summary="Output ID of ENV-250A Contact Lickometer switching unit."><use>OFF->Lickometer active, ON->Floor connected to shock emitter</use></output>
^Out_LickShockSwitch = 5
\\\<output name="Out_Ultrasonic" summary="Output ID of ultrasonic recording unit."><use>???</use></output>
^Out_Ultrasonic = 6
\\\<output name="Out_ShockEmitter" summary="Output ID of shock unit."><use>Toggle shock delivery: OFF->No shock presently being delivered, ON->CONTINUOUS SHOCK PRESENTLY BEING DELIVERED</use></output>
^Out_ShockEmitter = 7
\\\<output name="Out_HouseLightRear" summary="Output ID of rear-most house light."><use>OFF->unlit, ON->lit</use></output>
^Out_HouseLightRear = 9
\\\<output name="Out_HouseLightMid" summary="Output ID of miidle house light."><use>OFF->unlit, ON->lit</use></output>
^Out_HouseLightMid = 10
\\\<output name="Out_HouseLightFront" summary="Output ID of front-most house light."><use>OFF->unlit, ON->lit</use></output>
^Out_HouseLightFront = 11
\\\<output name="Out_LedRed" summary="Output ID of Red LED (rearmost)."><use>OFF->unlit, ON->lit</use></output>
^Out_LedRed = 12
\\\<output name="Out_LedGreen" summary="Output ID of Green LED (frontmost)."><use>OFF->unlit, ON->lit</use></output>
^Out_LedGreen = 13
\\\<output name="Out_LedYellow" summary="Output ID of Yellow LED (middle)."><use>OFF->unlit, ON->lit</use></output>
^Out_LedYellow = 14

\\\<constant group="z-pulse" represents="parameter" name="ZP_ExtendSipper" summary="Trigger extend sipper; set S for max # of sips before retraction"></constant>
^ZP_ExtendSipper = 1
\\\<constant group="z-pulse" represents="parameter" name="ZP_SipperLimitHit" summary="Triggers when the sipper limit is hit; if S less than 0 then never triggered."></constant>
^ZP_SipperLimitHit = 2
\\\<constant group="z-pulse" represents="parameter" name="ZP_RetractSipper" summary="Trigger sipper retract, regardless of whether sipper limit hit"></constant>
^ZP_RetractSipper = 3

\\\<constant group="z-pulse" represents="parameter" name="ZP_TerminateExperiment" summary="End the experiment - may be used if error occurrs"></constant>
^ZP_TerminateExperiment = 4

\\\<constant group="z-pulse" represents="parameter" name="ZP_HouseLightsOn" summary="Turn on house lights"></constant>
^ZP_HouseLightsOn = 5
\\\<constant group="z-pulse" represents="parameter" name="ZP_HouseLightsOff" summary="Turn off house lights"></constant>
^ZP_HouseLightsOff = 6
\\\<constant group="z-pulse" represents="parameter" name="ZP_StimLightsOn" summary="Turns on all stimulus lights"></constant>
^ZP_StimLightsOn = 7
\\\<constant group="z-pulse" represents="parameter" name="ZP_StimLightsMid" summary="Switch on only middle stim light on"></constant>
^ZP_StimLightsMid = 8
\\\<constant group="z-pulse" represents="parameter" name="ZP_StimLightsOff" summary="Switch off all stim lights"></constant>
^ZP_StimLightsOff = 9


\\\<constant group="z-pulse" represents="parameter" name="ZP_ExtendLeverSingle" summary="Extend single lever determined by A(^A_CurrentLever)"></constant>
^ZP_ExtendLeverSingle = 10
\\\<constant group="z-pulse" represents="parameter" name="ZP_ExtendLeverAll" summary="Extend all levers"></constant>
^ZP_ExtendLeverAll = 11
\\\<constant group="z-pulse" represents="parameter" name="ZP_RetractLeverAll" summary="Retract all levers"></constant>
^ZP_RetractLeverAll = 12

\\\<constant group="z-pulse" represents="parameter" name="ZP_NewTrial" summary="Trigged when a single trial duration is reached"></constant>
^ZP_NewTrial = 13

\\\<constant group="z-pulse" represents="parameter" name="ZP_TimerStart" summary="Used to start a 'timer' which will trigger a ZP_TimerReached when time passed - set V with delay milliseconds"></constant>
^ZP_TimerStart = 14
\\\<constant group="z-pulse" represents="parameter" name="ZP_TimerReached" summary="Triggered when the timer is triggered, and then reached"></constant>
^ZP_TimerReached = 15

\\\ARRAYS
\\\<array name="A" outputName="Trials overview" summary="Trial summary data">
DIM A = 6
\\\<column name="A_CompletedTrials" outputName="Total trials" summary="The number of trials that have already been completed"></column>
^A_CompletedTrials = 0
\\\<column name="A_SuccessfulTrials" outputName="Successful trials" summary="The number of trials that have been successfully completed (middle and side levers pressed)"></column>
^A_SuccessfulTrials = 1
\\\<column name="A_CurrentHours" outputName="Hours" summary="Hours since commencement (for H:M:S.MS)"></column>
^A_CurrentHours = 2
\\\<column name="A_CurrentMinutes" outputName="Minutes" summary="Minutes since commencement (for H:M:S.MS)"></column>
^A_CurrentMinutes = 3
\\\<column name="A_CurrentSeconds" outputName="Seconds" summary="Seconds since commencement (for H:M:S.MS)"></column>
^A_CurrentSeconds = 4
\\\<column name="A_CurrentMilliseconds" outputName="Milliseconds" summary="Milliseconds since commencement (for H:M:S.MS) "></column>
^A_CurrentMilliseconds = 5
\\\<column name="A_CurrentLever" summary="Current lever in use"></column>
^A_CurrentLever = 6
\\\</array>

\\\<array name="B" outputName="Trials" summary="Specific trial data">
DIM B = 80000 \ we wish it could be (^Gen_MaxTrials * B_TrialIndexMultiplier) - 1
\\\<column name="B_TrialNumber" outputName="Trial" summary="Number of this trial"></column>
^B_TrialNumber = 0
\\\<column name="B_TrialSuccessful" outputName="Successful?" summary="Whether the trial was successful (No=0, Yes=1)"></column>
^B_TrialSuccessful = 1
\\\<column name="B_TrialTimeHour" outputName="Hour" summary="Time post-commencement (H) this trial occurred"></column>
^B_TrialTimeHour = 2
\\\<column name="B_TrialTimeMinute" outputName="Minute" summary="Time post-commencement (M) this trial occurred"></column>
^B_TrialTimeMinute = 3
\\\<column name="B_TrialTimeSecond" outputName="Second" summary="Time post-commencement (S) this trial occurred"></column>
^B_TrialTimeSecond = 4
\\\<column name="B_TrialTimeMillisecond" outputName="Millisecond" summary="Time post-commencement (MS) this trial occurred"></column>
^B_TrialTimeMillisecond = 5
\\\<column name="B_TrialMsec" outputName="Msec from start" summary="Time post-commencement (msec) this trial occurred TOTAL - Not related to H:M:S"></column>
^B_TrialMsec = 6
\\\<column name="B_CentrePressDelay" outputName="First-press delay" summary="Time (in msec) after start of this trial the centre lever was pressed; -1 if not pressed"></column>
^B_CentrePressDelay = 7
\\\<column name="B_SecondPressDelay" outputName="Second-press delay" summary="Time (in msec) after start of this trial the retractable lever was pressed; -1 if not pressed"></column>
^B_SecondPressDelay = 8
\\\<column name="B_FalseCentreHits" outputName="Irrelevant presses" summary="Number of times the centre lever was pressed after the retractable lever was extended"></column>
^B_FalseCentreHits = 9
\\\<column name="B_ExtendedLever" outputName="Extended lever" summary="Which lever was (or would have been) extended (0=Left  1=Right  2=Centre)"></column>
^B_ExtendedLever = 10
\\\<column name="B_LickDelay" outputName="Lick Delay" summary="Time (in msec) before lick count was reached; -1 = NA"></column>
^B_LickDelay = 11
\\\<column name="B_LickCount" outputName="Lick Count" summary="Number of licks taken"></column>
^B_LickCount = 12
\\\<column name="B_FirstLickDelay" outputName="First-lick Delay" summary="Time (in msec) before first lick; -1 = NA"></column>
^B_FirstLickDelay = 13
\\\</array>
\\\<constant group="general" represents="parameter" name="B_TrialIndexMultiplier" summary="Multiplier to be used for each trial"></constant>
^B_TrialIndexMultiplier = 14

\\\<array name="D" summary="Which lever to extend/monitor press for each training trial">
LIST D = 0,1
\\\<column name="D_LeverID" summary="ID of lever to be pressed - not used since there is only one column"></column>
\\\</array>

\\\Variable declarations
\\\<!--<variable name="" summary=""></variable>-->
\\\<variable name="O" summary="Camera status"></variable>
\\\<variable name="Q" summary="Current offset for B array"></variable>
\\\<variable name="R" summary="Inter-trial pause (generated)"></variable>
\\\<variable name="S" summary="Number of sips remaining before sipper retract - set before using ZP_ExtendSipper"></variable>
\\\<variable name="T" summary="Timer - # of msec since commencement"></variable>
\\\<variable name="U" summary="Timer - variable swapping 1"></variable>
\\\<variable name="W" summary="Timer - variable swapping 2"></variable>
\\\<variable name="X" summary="Time remaining in current trial (sec)"></variable>
\\\<variable name="Y" summary="Time remaining in countdouwn timer (msec)"></variable>

\\\<variable name="V" summary="Duration timer - Time to be delayed before ZP_TimerReached in seconds"></variable>

\\\<stateset id="1" summary="Run the preparation and termination functions of the program">
S.S.1,
\\\<state id="1" summary="Set variables to default values">
S1,
	0":;
		SET C(^C_MaxTrials) = ^Def_MaxTrials;
		SET C(^C_RewardLicks) = ^Def_RewardLicks;
		~C[2] := UNCONNECTED;
        C[3] := CONNECT_OK;
        C[4] := CONNECT_FAIL;~;
		---> S5
\\\</state>
\\\<state id="5" summary="Pause until start command is issued; Update displayed variables.">
S5,
	#START:;
		~ IF ((box = 1) and (O = CONNECT_OK)) then begin WriteEventVM('.', 'BOX1', StartSavingEvent, 'StartEvent'); end; ~;
		~ IF ((box = 2) and (O = CONNECT_OK)) then begin WriteEventVM('.', 'BOX2', StartSavingEvent, 'StartEvent'); end; ~;
		~ IF ((box = 3) and (O = CONNECT_OK)) then begin WriteEventVM('.', 'BOX3', StartSavingEvent, 'StartEvent'); end; ~;
		~ IF ((box = 4) and (O = CONNECT_OK)) then begin WriteEventVM('.', 'BOX4', StartSavingEvent, 'StartEvent'); end; ~;
		---> S10
	0.01":;
		SHOW 1, Maxmimum Trials, C(^C_MaxTrials);
		SHOW 3, Completed Trials, 0;
		SHOW 4, Successful Trials, 0;
		SHOW 5, Awaiting start, 0;
		SHOW 12, Reward licks, C(^C_RewardLicks); 
		~ IF ((box = 1) and (O <> CONNECT_OK)) then begin ConnectToVMEx(MG, BOX, '.', 'BOX1'); O := GetIfaceStatus();end;~;
		~ IF ((box = 2) and (O <> CONNECT_OK)) then begin ConnectToVMEx(MG, BOX, '.', 'BOX2'); O := GetIfaceStatus();end;~;
		~ IF ((box = 3) and (O <> CONNECT_OK)) then begin ConnectToVMEx(MG, BOX, '.', 'BOX3'); O := GetIfaceStatus();end;~;
		~ IF ((box = 4) and (O <> CONNECT_OK)) then begin ConnectToVMEx(MG, BOX, '.', 'BOX4'); O := GetIfaceStatus();end;~;
		---> SX
\\\</state>
\\\<state id="10" summary="Wait for program termination">
S10,
	#Z^ZP_TerminateExperiment:;
		SHOW 5, Finished, 2;
		~ IF ((box = 1) and (O = CONNECT_OK)) then begin WriteEventVM('.', 'BOX1', StopSavingEvent, 'StopEvent'); end; ~;
		~ IF ((box = 2) and (O = CONNECT_OK)) then begin WriteEventVM('.', 'BOX2', StopSavingEvent, 'StopEvent'); end; ~;
		~ IF ((box = 3) and (O = CONNECT_OK)) then begin WriteEventVM('.', 'BOX3', StopSavingEvent, 'StopEvent'); end; ~;
		~ IF ((box = 4) and (O = CONNECT_OK)) then begin WriteEventVM('.', 'BOX4', StopSavingEvent, 'StopEvent'); end; ~;
		~ IF ((box = 1) and (O <> CONNECT_OK)) then begin DisconnectVM('.', 'BOX1'); O := GetIfaceStatus();end;~;
		~ IF ((box = 2) and (O <> CONNECT_OK)) then begin DisconnectVM('.', 'BOX2'); O := GetIfaceStatus();end;~;
		~ IF ((box = 3) and (O <> CONNECT_OK)) then begin DisconnectVM('.', 'BOX3'); O := GetIfaceStatus();end;~;
		~ IF ((box = 4) and (O <> CONNECT_OK)) then begin DisconnectVM('.', 'BOX4'); O := GetIfaceStatus();end;~;
		SET B(Q + ^B_TrialIndexMultiplier + ^B_TrialNumber) = -987.987;
		---> S20

\\\</state>
\\\<state id="10" summary="Turn off all outputs, save data and end">
S20,   
  0":;
  	---> STOPABORTFLUSH
\\\</state>
\\\</stateset>


\\\<stateset id="2" summary="Operate the experiment functionally">
S.S.2,
\\\<state id="1" summary="Wait for the start trigger">
S1,
	#START:;
		SHOW 5, Running, 1;
		---> S3
\\\</state>
\\\<state id="3" summary="Reset stimulus lights, select retract lever for use">
S3,
	0":;
		RANDD A(^A_CurrentLever) = D;

		SET Q = A(^A_CompletedTrials) * ^B_TrialIndexMultiplier;
		SET B(Q + ^B_TrialNumber) = A(^A_CompletedTrials);
		SET B(Q + ^B_TrialTimeHour) = A(^A_CurrentHours), B(Q + ^B_TrialTimeMinute) = A(^A_CurrentMinutes), B(Q + ^B_TrialTimeSecond) = A(^A_CurrentSeconds), B(Q + ^B_TrialTimeMillisecond) = A(^A_CurrentMilliseconds);
		SET B(Q + ^B_TrialMsec) = T;
		SET B(Q + ^B_ExtendedLever) = A(^A_CurrentLever);

		\\initialise vars to 'not done' value of -1
		SET B(Q + ^B_CentrePressDelay) = -1;
		SET B(Q + ^B_SecondPressDelay) = -1;
		SET B(Q + ^B_LickDelay) = -1;
		SET B(Q + ^B_FirstLickDelay) = -1;

		Z^ZP_HouseLightsOn;
		Z^ZP_StimLightsOn;
		SET V = 10000; \\set max time for next step (10 sec = 10000msec)
		Z^ZP_TimerStart;
		---> S4
\\\</state>
\\\<state id="4" summary="Wait up to 10 seconds for centre lever press; off/reset if no press">
S4,
	#Z^ZP_TimerReached:;
		\\no press; update records turn off all lights and jump to pause state
		SET B(Q + ^B_CentrePressDelay) = -1;
		Z^ZP_HouseLightsOff;
		Z^ZP_StimLightsOff;
		---> S30

	#R^Inp_LeverTrigger:;
		SET B(Q + ^B_CentrePressDelay) = T - B(Q + ^B_TrialMsec); \calculate MSEC between trial start and lever press
		Z^ZP_StimLightsOff;
		Z^ZP_ExtendLeverSingle;
		SET V = 10000; \\set max time for next step (10 sec = 10000msec)
		Z^ZP_TimerStart;
		---> S7

\\\</state>
\\\<state id="7" summary="Wait for 10 seconds, or correct lever press">
S7,
  #R^Inp_LeverTrigger:;
	SHOW 7, Centre Lever Pressed, T;
	ADD B(Q + ^B_FalseCentreHits); \add 1 to number of 'incorrect' centre hits
	---> SX
  #R^Inp_LeverInputLeft:;
	SHOW 7, Left Lever Pressed, T;
	IF A(^A_CurrentLever) = ^Lever_LeftLever [@hit active lever]
		@hit active lever:;
			---> S8
  #R^Inp_LeverInputRight:;
	SHOW 7, Right Lever Pressed, T;
	IF A(^A_CurrentLever) = ^Lever_RightLever [@hit active lever]
		@hit active lever:;
			---> S8

  #Z^ZP_TimerReached:;
	SET B(Q + ^B_SecondPressDelay) = -1; \\record failure to press
	Z^ZP_HouseLightsOff;
	Z^ZP_StimLightsOff;
	Z^ZP_RetractLeverAll;
	\\no press; update records turn off all lights and jump to pause state
	---> S30

\\\</state>
\\\<state id="8" summary="Record press; Turn off left and right stim lights; retract all levers">
S8,
	0":;
		SET B(Q + ^B_TrialSuccessful) = 1; \\record trial as successful
		SET B(Q + ^B_SecondPressDelay) = T - B(Q + ^B_TrialMsec) - 10; \calculate MSEC between trial start and lever press
		ADD A(^A_SuccessfulTrials);
		Z^ZP_StimLightsMid;
		SET S = C(^C_RewardLicks);
		Z^ZP_ExtendSipper;
		Z^ZP_RetractLeverAll;

		SET V = 10000; \\set max time for next step (10 sec = 10000msec)
		Z^ZP_TimerStart;
		---> S9
\\\</state>
\\\<state id="9" summary="Wait until lick count has his the value of S - i.e. ZP_SipperLimitHit">
S9,
  #Z^ZP_SipperLimitHit:;
		SET B(Q + ^B_LickDelay) = T - B(Q + ^B_TrialMsec); \record how long it took before the rat reached the number of licks
		---> SX
  #Z^ZP_TimerReached:;
		Z^ZP_RetractSipper; \\retract the sipper if not already retracted
		Z^ZP_StimLightsOff;
		Z^ZP_HouseLightsOff;
		---> S30
	
\\\</state>
\\\<state id="30" summary="Check if full number of trials have been completed, and if so issue terminate command.">
S30,
	0":;
		ADD A(^A_CompletedTrials);
		SHOW 3, Completed Trials, A(^A_CompletedTrials);
		SHOW 4, Successful Trials, A(^A_SuccessfulTrials);
		IF A(^A_CompletedTrials) >= C(^C_MaxTrials) [@count reached, @count not reached]
			@count reached:;
				Z^ZP_TerminateExperiment;
				---> S32
			@count not reached:;
				---> S31
\\\</state>
\\\<state id="31" summary="Wait for trial duration to be reached, then restart">
S31,
	#Z^ZP_NewTrial:;
		---> S3
\\\</state>
\\\</stateset>

\\\<stateset id="3" summary="Operate the sipper">
S.S.3,
\\\<state id="1" summary="Wait for sipper extend (ZP_ExtendSipper) to be triggered">
S1,
	#Z^ZP_ExtendSipper:;
		OFF ^Out_LickShockSwitch; \precautionary; should already be off.
		ON ^Out_LiquidDispenser;
		IF S <= 0 [@no sip limit, @sip limit]
			@no sip limit:;
				---> S3
			@sip limit:;
				---> S5
\\\</state>
\\\<state id="3" summary="Extend sipper until ZP_RetractSipper occurs">
S3,
	#Z^ZP_RetractSipper:;
		OFF ^Out_LiquidDispenser;
		---> S1
\\\</state>
\\\<state id="5" summary="Extend sipper until ZP_RetractSipper occurs or max sips hit">
S5,
	#Z^ZP_RetractSipper:;
		OFF ^Out_LiquidDispenser;
		---> S1
	S#R^Inp_Lickometer:;
		Z^ZP_SipperLimitHit;
		OFF ^Out_LiquidDispenser;
		---> S1
\\\</state>
\\\</stateset>

\\\<stateset id="4" summary="Count sips and add to each trial">
S.S.4,
\\\<state id="1" summary="Wait for sipper extend (ZP_ExtendSipper) to be triggered">
S1,
	#Z^ZP_ExtendSipper:; \when sipper extended, start counting
				---> S2
\\\</state>
\\\<state id="2" summary="Count number of sips until retraction occurs or sipper limit hit">
S2,
	#R^Inp_Lickometer:;
		ADD B(Q + ^B_LickCount);
		IF B(Q + ^B_LickCount) = 1 [@first lick]
			@first lick:;
				SET B(Q + ^B_FirstLickDelay) = T - B(Q + ^B_TrialMsec); 
				---> SX
	#Z^ZP_RetractSipper:;
		---> S1
	#Z^ZP_SipperLimitHit:;
		---> S1
\\\</state>
\\\</stateset>

\\\<stateset id="5" summary="Control house light system">
S.S.5,
\\\<state id="1" summary="Wait for lighting change command">
S1,
	#Z^ZP_HouseLightsOn:; \if split, then could be problems due to temporal precision
		IF ^Lights_UseHouseRear = 1 [@switch on rear light, @do not switch on rear light]
			@switch on rear light:;
				ON ^Out_HouseLightRear;
				IF ^Lights_UseHouseMid = 1 [@switch on mid light, @do not switch on mid light]
					@switch on mid light:;
						ON ^Out_HouseLightMid;
						IF ^Lights_UseHouseFront = 1 [@switch on front light]
							@switch on front light:;
								ON ^Out_HouseLightFront;
									---> SX
					@do not switch on mid light:;
						IF ^Lights_UseHouseFront = 1 [@switch on front light]
							@switch on front light:;
								ON ^Out_HouseLightFront;
									---> SX
			@do not switch on rear light:;
					IF ^Lights_UseHouseMid = 1 [@switch on mid light, @do not switch on mid light]
					@switch on mid light:;
						ON ^Out_HouseLightMid;
						IF ^Lights_UseHouseFront = 1 [@switch on front light]
							@switch on front light:;
								ON ^Out_HouseLightFront;
									---> SX
					@do not switch on mid light:;
						IF ^Lights_UseHouseFront = 1 [@switch on front light]
							@switch on front light:;
								ON ^Out_HouseLightFront;
									---> SX
	#Z^ZP_HouseLightsOff:; 
		OFF ^Out_HouseLightRear;
		OFF ^Out_HouseLightMid;
		OFF ^Out_HouseLightFront;
		---> SX
	#Z^ZP_TerminateExperiment:;
		---> S32
\\\</state>
\\\</stateset>

\\\<stateset id="6" summary="Control stimulus light system">
S.S.6,
\\\<state id="1" summary="Wait for lighting change command">
S1,
	#Z^ZP_StimLightsOn:; 
		ON ^Out_LedRed;
		ON ^Out_LedGreen;
		ON ^Out_LedYellow;
		---> SX
	#Z^ZP_StimLightsOff:; 
		OFF ^Out_LedRed;
		OFF ^Out_LedGreen;
		OFF ^Out_LedYellow;
		---> SX
	#Z^ZP_StimLightsMid:; 
		OFF ^Out_LedRed;
		OFF ^Out_LedGreen;
		ON ^Out_LedYellow;
		---> SX
	#Z^ZP_TerminateExperiment:;
		---> S32
\\\</state>
\\\</stateset>

\\\<stateset id="7" summary="Timer - counts up in msec (in steps of 10 msec)">
S.S.7,
\\\<state id="1" summary="Wait for start trigger">
S1,
	#START:;
		---> S2
\\\<state id="2" summary="Increment counter, hour, minutes, seconds, milliseconds">
\\\</state>
S2,
	0.01":;
		SET T = T + 10;
		SET A(^A_CurrentMilliseconds) = A(^A_CurrentMilliseconds) + 10;
		SET U = A(^A_CurrentMilliseconds), W = A(^A_CurrentSeconds);
		~ IF (U = 1000) then begin U := 0; W := W + 1; end; ~;
		SET A(^A_CurrentMilliseconds) = U, U = W, W = A(^A_CurrentMinutes);
		~ IF (U = 60) then begin U := 0; W := W + 1; end; ~;
		SET A(^A_CurrentSeconds) = U, U = W, W = A(^A_CurrentHours);
		~ IF (U = 60) then begin U := 0; W := W + 1; end; ~;
		SET A(^A_CurrentMinutes) = U, A(^A_CurrentHours) = W;
		SHOW 20, Hours, A(^A_CurrentHours);
		SHOW 21, Minutes, A(^A_CurrentMinutes);
		SHOW 22, Seconds, A(^A_CurrentSeconds);
		SHOW 23, Milliseconds, A(^A_CurrentMilliseconds);
			---> SX
	#Z^ZP_TerminateExperiment:;
		---> S32
\\\</state>
\\\</stateset>

\\\<stateset id="8" summary="Control lever extensions">
S.S.8,
\\\<state id="1" summary="Wait for lighting change command">
S1,
	#Z^ZP_ExtendLeverSingle:;
		SHOW 13, Extend single levers issued, T;
		IF A(^A_CurrentLever) = ^Lever_LeftLever [@extend left lever, @not left lever]
			@extend left lever:;
				ON ^Out_LeftLeverRetract;
				---> SX
			@not left lever:;
				IF A(^A_CurrentLever) = ^Lever_RightLever [@extend right lever]
					@extend right lever:;
						ON ^Out_RightLeverRetract;
						---> SX
	#Z^ZP_ExtendLeverAll:;
		SHOW 13, Extend all levers issued, T;
		ON ^Out_LeftLeverRetract;
		ON ^Out_RightLeverRetract;
		---> SX
	#Z^ZP_RetractLeverAll:;
		SHOW 13, Retract all levers issued, T;
		OFF ^Out_LeftLeverRetract;
		OFF ^Out_RightLeverRetract;
		---> SX
	#Z^ZP_TerminateExperiment:;
		OFF ^Out_LeftLeverRetract;
		OFF ^Out_RightLeverRetract;
		---> S32
\\\</state>
\\\</stateset>

\\\<stateset id="10" summary="Trial timer - trigger a ZP_NewTrial every 40 seconds">
S.S.10,
\\\<state id="1" summary="Wait for start trigger">
S1,
	#START:;
		SET X = 40;
		---> S2
\\\<state id="2" summary="Every cycle, check if max duration of experiment reached">
\\\</state>
S2,
	1":;
		SUB X;
		SHOW 4, Trial Time rem. (s), X;
		IF X = 0 [@trial time complete]
			@trial time complete:;
				Z^ZP_NewTrial;
				SET X = 40;
				---> SX
	#Z^ZP_TerminateExperiment:;
		---> S32
\\\</state>
\\\</stateset>

\\\<stateset id="11" summary="General timer - when triggered, waing X milliseconds, then respond with a trigger">
S.S.11,
\\\<state id="1" summary="Wait for start trigger">
S1,
	#Z^ZP_TimerStart:;
		SET Y = V - 10; \have to subtract 10 msec for the time taken to get to the next state
		---> S2
\\\<state id="2" summary="Every cycle, check if max duration of experiment reached">
\\\</state>
S2,
	0.01":;
		SET Y = Y - 10;
		SHOW 5, Current step timer (msec), Y;
		IF Y <= 0 [@countdown finished]
			@countdown finished:;
				Z^ZP_TimerReached;
				---> S1
	#Z^ZP_TimerStart:;
		SET Y = V - 10;
		---> S2
	#Z^ZP_TerminateExperiment:;
		---> S32
\\\</state>
\\\</stateset>

S.S.20,
S1,
	0.01":;
		IF (O = C(^C_CamUnconnectedState)) [@UNCON, @OTHER]
			 @UNCON: SHOW 14, Video Unconnected,0 ---> S1
             @OTHER: IF (O = C(^C_CamConnectOkState)) [@CONNECTED, @OTHER2]
                @CONNECTED: SHOW 14, Video OK,0 ---> S1
                @OTHER2: IF (O = C(^C_CamConnectFailState)) [@FAIL, @OTHER3]
                   @FAIL:   SHOW 14, Video Failed,0 ---> S1
                   @OTHER3: SHOW 14, Video Unknown,0  ---> S1

\\\</program>
