\ MedLab8 Fixed Interval.mpc  Fixed Interval Source Program for MED-PC Version IV

\ Copyright (C) 2007 MED Associates, All Rights Reserved.

\ Constants Used in this Program
\ Compare the configurations below with the wiring chart supplied
\ with all system orders.  Edit Input and Output #'s if different
\ for your system or contact MED Associates for assistance.

\ Standard Input Configuration
^LeftLever  = 1
^RightLever = 2

\ Standard Output Configuration
^Pellet     = 3
^Dipper     = 3  \ If both Pellet and Dipper are ordered
                 \ It will be necessary to change one of these
^LeftLight  = 4
^RightLight = 5
^HouseLight = 7
^Pump       = 8


\ Program Constants
^Left      = 1
^Right     = 2
^PrevTrial = -5
^NextTrial = 5


\ A() = Control Variables with Assigned Aliases as Defined
Var_Alias Correct Lever (Left=1  Right=2)     = A(0)  \ Default = Left Lever
Var_Alias Reward (Pellet=1  Dipper=2  Drug=3) = A(1)  \ Default = Pellet
Var_Alias Reward Time (sec)                   = A(2)  \ Default = 0.05 seconds
Var_Alias Time Out Following Reward           = A(3)  \ Default = 0 seconds
Var_Alias Session Time (Min)                  = A(4)  \ Default = 60 minutes
Var_Alias Fixed Interval Value (sec)          = A(5)  \ Default = 1 second
Var_Alias Maximum Reinforcers                 = A(6)  \ Default = 50
Var_Alias SoftCR Data Array (Yes=1  No=0)     = A(7)  \ Default = Yes

\  Constants for Control Variables Array
^CorLever     = 0
^Reward       = 1
^RewTime      = 2
^TimeOut      = 3
^SessTime     = 4
^FIVal        = 5
^MaxReinf     = 6
^SoftCR       = 7
^RewTimeTicks = 8
^TimeOutTicks = 9


\ List Data Variables Here
\  B()    = Trial Data
\  B(0)   = Total Responses
\  B(1)   = Correct Response Count
\  B(2)   = Incorrect Response Count
\  B(3)   = % Correct
\  B(4)   = % Incorrect
\  B(J)   = Trial Number
\  B(J+1) = Correct Responses
\  B(J+2) = Incorrect Responses
\  B(J+3) = Pause (sec)
\  B(J+4) = Run Time (sec)

\  Constants for Trial Data Array
^Total     = 0
^Correct   = 3
^Incorrect = 4
^Trial     = 0
^CorResp   = 1
^IncorResp = 2
^Pause     = 3
^RunTime   = 4

\  C() = IRT Array and Event Pen Code for Soft Cum. Recorder

\  F = Total Rewards


\ List Working Variables Here
\  I = Subscript for the IRT Array C
\  J = Subscript for the Trial Array B
\  K = Elapsed Time in Session
\  L = Ratio Count
\  T = Elapsed Time in 0.1 sec Increments for SoftCR Data
\  Y = Response Interval Used by Program.  Updates to New
\        Value at START and Following Reinforcement.


DIM A = 9
DIM B = 1000
DIM C = 10000  \ Dimension Array C for 10001 data points.
               \ Under MED-PC Version IV, this array may be
               \ enlarged up to 1 million elements; however,
               \ 10,000 was felt to be adequate for this application.
               \ An end of array seal -987.987 will limit the saved
               \ file to only those elements used during the running
               \ of the procedure.


\ Z-Pulses Used in this Program
\  Z1  = Pellet Reinforcement Signal
\  Z2  = Dipper Reinforcement Signal
\  Z3  = Pump Reinforcement Signal
\  Z32 = End of Session Signal

^Start  = 5
^Corr   = 6
^Incorr = 7
^Event  = 8
^End    = 32


DISKCOLUMNS = 5


\***************************************************
\              FIXED INTERVAL SCHEDULE
\    S1 - Set Default Values
\         Correct Lever              (1-Left)
\         Reward Device              (1-Pellet)
\         Reward Time                (0.05 seconds)
\         Time Out Following Reward  (0 seconds)
\         Session Time               (60 minutes)
\         Fixed Interval Value       (1 second)
\         Maximum Reinforcers        (50)
\         SoftCR Activation          (1-Yes)
\***************************************************
S.S.1,
S1,
  0.001": SET A(^CorLever) = 1,  A(^Reward)   = 1,  A(^RewTime) = 0.05;
          SET A(^TimeOut)  = 0,  A(^SessTime) = 60, A(^FIVal)   = 1;
          SET A(^MaxReinf) = 50, A(^SoftCR)   = 1;
          SET J = 5, B(J) = -987.987 ---> S2

S2,     \ First Statement: Wait for START signal, turn HouseLight ON,
        \ test for Correct Lever and turn associated stimulus ON.
        \
        \ Second Statement: Update screen display with default values
        \ for Control Variables.  This will show any changes made via
        \ the "Configure | Change Variables" Window prior to START.
  #START: CLEAR 1,60; 
          SET A(^RewTimeTicks) = A(^RewTime) * 1", A(^TimeOutTicks) = A(^TimeOut) * 1";
          SET B(J+^Trial) = 1, B(J+^NextTrial) = -987.987, Y = A(^FIVal);
          SHOW 2,Tot Cor Rsp,B(^CorResp), 3,Tot Incor Rsp,B(^IncorResp), 4,Reward,F;
          SHOW 6,Trial #,B(J+^Trial),     7,Cor Rsp,B(J+^CorResp),       8,Incor Rsp,B(J+^IncorResp);
          ON ^HouseLight, ^LeftLight, ^RightLight ---> S3
  1": SHOW 1,Lever Code,A(^CorLever),      2,Reward,A(^Reward),         3,Reward Time,A(^RewTime);
      SHOW 4,Time Out,A(^TimeOut),         5,Session Time,A(^SessTime), 6,FI Value,A(^FIVal);
      SHOW 7,Max Reinforcers,A(^MaxReinf), 8,SoftCR Code,A(^SoftCR) ---> SX

S3,     \ Control FI here.
        \ Terminate procedure with Z^End signal from Session Timer.
  1": SUB Y; IF Y <= 0 [@True-Interval Timeout, @False-Continue]
                @Timeout: ---> S4
                @Cont: ---> SX
  #RA(^CorLever): Z^Corr ---> SX
  #R^LeftLever: Z^Incorr ---> SX
  #R^RightLever: Z^Incorr ---> SX
  #Z^End: ---> S10

S4,     \ Reinforce first Response following FI here
        \ Activate Reward and issue Z-pulse for
        \ Reward Timer and data collection.
        \ Terminate procedure with Z^End signal from Session Timer.
  #RA(^CorLever): Z^Corr; ZA(^Reward); Z^Event ---> S5
  #R^LeftLever: Z^Incorr ---> SX
  #R^RightLever: Z^Incorr ---> SX
  #Z^End: ---> S10

S5,     \ Time Out Interval Following Reward
        \ Reset FI working variable "Y."  This allows the User
        \ to change the value of A(^FIVal) while the Animal is
        \ running and have the new value take effect after the
        \ current interval is reached.
  A(^TimeOutTicks)#T: Z^Event;
                      IF F >= A(^MaxReinf) [@End, @Cont]
                         @End: SET B(J) = -987.987; Z^End ---> S10
                         @Cont: SET B(J+^Trial) = B(J+^PrevTrial) + 1, Y = A(^FIVal);
                                SHOW 5,FI=,Y, 6,Trial #,B(J+^Trial); Z^Start ---> S3
  #Z^End: ---> S10

S10,    \ End of Session - Turn Lights Off
        \ Calculate % Correct and % Incorrect.
  0.01": OFF ^HouseLight, ^LeftLight, ^RightLight;
         IF B(^Total) = 0 [@NoCalc, @Calculate]
            @NoCalc: ---> S11
            @Calculate: SET B(^Correct) = B(^CorResp) / B(^Total) * 100;
                        SET B(^Incorrect) = B(^IncorResp) / B(^Total) * 100 ---> S11

S11,    \ Holding State at End of Session
  1': ---> SX


\*********************************************
\            CORRECT LEVER COUNTER
\*********************************************
S.S.2,
S1,
  #START: ---> S2

S2,
  #Z^Corr: ADD B(^Total), B(^CorResp), B(J+^CorResp);
           SHOW 2,Tot Cor Rsp,B(^CorResp), 7,Cor Rsp,B(J+^CorResp) ---> SX
  #Z^End: ---> S1


\*********************************************
\           INCORRECT LEVER COUNTER
\*********************************************
S.S.3,
S1,
  #START: ---> S2

S2,
  #Z^Incorr: ADD B(^Total), B(^IncorResp), B(J+^IncorResp);
             SHOW 3,Tot Incor Rsp,B(^IncorResp), 8,Incor Rsp,B(J+^IncorResp) ---> SX
  #Z^End: ---> S1


\*********************************************
\            REWARD CONTROL TIMER
\*********************************************
S.S.4,
S1,
  #Z1: ON ^Pellet ---> S2
  #Z2: ON ^Dipper ---> S2
  #Z3: ON ^Pump ---> S2

S2,     \ Time Reward Device for A(2) seconds
        \ Default value set in S.S.1, S1 & S2
  A(^RewTimeTicks)#T: OFF ^Pellet, ^Dipper, ^Pump ---> S1


\*********************************************
\              REWARD COUNTER
\*********************************************
S.S.5,
S1,
  #START: ---> S2

S2,
  #ZA(^Reward): ADD F; SHOW 4,Reward,F ---> SX
  #Z^End: ---> S1


\***********************************************
\           PAUSE AND RUN TIME TIMING
\***********************************************
S.S.6,
S1,
  #START: ---> S2

S2,
  #RA(^CorLever): ---> S3

S3,
  1": ADD B(J+^RunTime); SHOW 10,Run Time,B(J+^RunTime) ---> S3
  #ZA(^Reward): SHOW 10,Run Time,B(J+^RunTime);
                SET J = J + 5, B(J+^NextTrial) = -987.987 ---> S4
  #Z^End: ---> S1

S4,
  #Z^Start: ---> S5
  1": ADD B(J+^Pause); SHOW 9,Pause,B(J+^Pause) ---> S4
  #Z^End: ---> S1

S5,
  #RA(^CorLever): SHOW 9,Pause,B(J+^Pause) ---> S3
  1": ADD B(J+^Pause); SHOW 9,Pause,B(J+^Pause) ---> S5
  #Z^End: ---> S1


\**********************************************
\   INCREMENT TIME T FOR IRT AND EVENT ARRAY
\**********************************************
S.S.7,
S1,
  #START: IF A(^SoftCR) > 0 [] ---> S2

S2,
  0.1": ADD T ---> SX
  #Z^End: ---> S1


\*********************************************************
\ ADD A STEP ELEMENT TO ARRAY C FOR EACH CORRECT RESPONSE
\*********************************************************
S.S.8,
S1,
  #START: IF A(^SoftCR) = 1 [@ActivateSoftCR, @NoSoftCR]
             @ActSoftCR: IF A(^CorLever) = ^Left [@LeftLeverCorrect, @RightLeverCorrect]
                            @LeftCorrect: ---> S2
                            @RightCorrect: ---> S3
             @NoSoftCR: ---> SX

S2,     \ Left Lever Correct
  #R^LeftLever: SET C(I) = T + 0.10, T = 0; ADD I;
                IF I = 10000 [@True, @False]
                   @True: ---> S1
                   @False: SET C(I) = -987.987 ---> SX
  #Z^End: ---> S1

S3,     \ Right Lever Correct
  #R^RightLever: SET C(I) = T + 0.10, T = 0; ADD I;
                 IF I = 10000 [@True, @False]
                    @True: ---> S1
                    @False: SET C(I) = -987.987 ---> SX
  #Z^End: ---> S1


\*************************************************************
\ ADD AN EVENT ELEMENT TO ARRAY C FOR EACH INCORRECT RESPONSE
\      ADDITIONAL EVENT ELEMENTS MAY BE ADDED AS NEEDED
\          FOR EXAMPLE TO MARK TIME OUT INTERVALS.
\*************************************************************
S.S.9,
S1,
  #START: IF A(^SoftCR) = 1 [@ActivateSoftCR, @NoSoftCR]
             @ActSoftCR: SET C(I) = 0.50, I = I + 1, C(I) = -987.987;
                         IF A(^CorLever) = ^Right [@LeftLeverIncorrect, @RightLeverIncorrect]
                            @LeftIncorrect: ---> S2
                            @RightIncorrect: ---> S3
             @NoSoftCR: SET C(0) = -987.987 ---> SX  \ Seal Array

S2,     \ Left Lever Incorrect
  #R^LeftLever: SET C(I) = T + 0.60, C(I+1) = 0.50, T = 0, I = I + 2;
                IF I >= 10000 [@True, @False]
                   @True: ---> S1
                   @False: SET C(I) = -987.987 ---> SX
  #Z^End: ---> S1

S3,     \ Right Lever Incorrect
  #R^RightLever: SET C(I) = T + 0.60, C(I+1) = 0.50, T = 0, I = I + 2;
                 IF I >= 10000 [@True, @False]
                    @True: ---> S1
                    @False: SET C(I) = -987.987 ---> SX
  #Z^End: ---> S1


\****************************************************
\    ADD A PIP ELEMENT TO ARRAY C FOR EACH REWARD
\****************************************************
S.S.10,
S1,
   #START: IF A(^SoftCR) > 0 [] ---> S2

S2,
  #Z1 ! #Z2 ! #Z3: SET C(I) = T + 0.20, T = 0; ADD I;
                   IF I = 10000 [@True, @False]
                      @True: ---> S1
                      @False: SET C(I) = -987.987 ---> SX
  #Z^End: SET C(I) = T + 0.31, I = I + 1, C(I) = -987.987 ---> S1


\*************************************************************
\     ADD AN EVENT ELEMENT TO ARRAY C FOR THE TIME-OUT
\*************************************************************
S.S.11,
S1,
  #START: IF A(^SoftCR) = 1 [@ActivateSoftCR, @NoSoftCR]
             @ActSoftCR: SET C(I) = 0.51, I = I + 1, C(I) = -987.987;
                         IF A(^TimeOut) = 0 [@NoEvent, @Record]
                            @NoEvent: ---> SX
                            @Record: ---> S2
             @NoSoftCR: SET C(0) = -987.987 ---> SX  \ Seal Array

S2,     \ Start Event Pen, Up
  #Z^Event: SET C(I) = T + 0.61, T = 0; ADD I;
            IF I >= 10000 [@True, @False]
               @True: ---> S1
               @False: SET C(I) = -987.987 ---> S3
  #Z^End: ---> S1

S3,     \ Stop Event Pen, Down
  #Z^Event: SET C(I) = T + 0.51, T = 0; ADD I;
            IF I >= 10000 [@True, @False]
               @True: ---> S1
               @False: SET C(I) = -987.987 ---> S2
  #Z^End: ---> S1


\*********************************************
\                SESSION CLOCK
\*********************************************
S.S.32,
S1,
  #START: SHOW 1,Session,K ---> S2

S2,
  1": ADD K; SHOW 1,Session,K/60;
      IF K/60 >= A(^SessTime) [@EndSession, @ContinueTiming]
         @End: Z^End ---> S3
         @Cont: ---> SX
  #Z^End: ---> S3

S3,     \ Wait for Screen Update and end with
        \ STOPABORTFLUSH for Automatic Data Saving
  2": ---> STOPABORTFLUSH
