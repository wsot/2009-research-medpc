<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<?xml-stylesheet type="text/xsl" href="comments.xsl"?>
<program>
<title>Training Paradigm Code - Antonio Paolini&quot;s 2008 third-year research group</title>
<history>
<revision number="1.0">
<author>Simeon Morgan &lt;smorgan@students.latrobe.edu.au&gt;</author>
<created>2008-04-10 22:17</created>
<summary>First version</summary>
</revision>
</history>
<constant group="general" represents="parameter" name="Def_MaxDuration" summary="Default maximum duration (in minutes) for program to run"></constant>
<constant group="general" represents="parameter" name="Abs_MaxTrials" summary="Limit on maximum number of trials to be recorded/processed"></constant>
<constant group="general" represents="parameter" name="Def_InterToneDelay" summary="Default Time (in ms) between presentation of first and second tones"></constant>
<constant group="general" represents="parameter" name="Def_PreToneDelay" summary="Default Time (in ms) between starting lever trigger and first tone presentation."></constant>
<array name="G" outputName="Configuration" outputStyle="cols" summary="">
<column name="G_MatchLever" outputName="Correct Lever" summary="Which lever is correct for a match (Left=0  Right=1)"></column>
<column name="C_MaxDuration" outputName="Max Duration" summary="Maximum time before automatic termination (minutes)"></column>
<column name="G_InterToneDelay" outputName="Inter-tone delay" summary="Time (in ms) between presentation of first and second tones"></column>
<column name="G_InterToneDelaySec" summary="Time (in s) between presentation of first and second tones. Autogenerated."></column>
<column name="G_PreToneDelay" outputName="Pre-tone delay" summary="Time (in ms) between starting lever trigger and first tone presentation."></column>
<column name="G_PreToneDelaySec" summary="Time (in s) between starting lever trigger and first tone presentation. Autogenerated."></column>
<column name="G_SndBurstDurationSec" outputName="Tone duration" summary="Duration of sound burst in s"></column>
<column name="G_CamUnconnectedState" summary="Used to store 'Unconnected' StateID of camera"></column>
<column name="G_CamConnectOkState" summary="Used to store 'Ok' StateID of camera"></column>
<column name="G_CamConnectFailState" summary="Used to store 'Fail' StateID of camera"></column>
<column name="G_LeverExtensionStatus" summary="Lever-extension status"></column>
<column name="G_MatchOrMismatch" summary="Whether trial is a match or mismatch trial"></column>
<column name="G_UltrasonicIndexOffset" summary="Array offset for ultrasonic time recording"></column>
<column name="G_USSequentialReadingA" summary="Number of sequential ultrasonic detections A"></column>
<column name="G_USEventIndexA" summary="Index of current event for ultrasonic A"></column>
<column name="G_USSequentialReadingB" summary="Number of sequential ultrasonic detections B"></column>
<column name="G_USEventIndexB" summary="Index of current event for ultrasonic B"></column>
<column name="C_MaxDurationMsec" summary="Maximum time before automatic termination in msec (autogenerated)"></column>
</array>
<!--<variable alias="" name="" summary=""></variable>-->
<variable alias="Maximum Duration" name="C(^C_MaxDuration)" summary="Maximum time before automatic termination"></variable>
<variable alias="Inter-tone Delay" name="G(^G_InterToneDelay)" summary="Time (in ms) between presentation of first and second tones"></variable>
<variable alias="Pre-tone Delay" name="G(^G_PreToneDelay)" summary="Time (in ms) between starting lever trigger and first tone presentation"></variable>
<input name="Inp_HeadEntry" summary="Input ID of the head entry unit on pellet dispenser"></input>
<input name="Inp_Lickometer" summary="Input ID of the lickometer"></input>
<input name="Inp_LeverTrigger" summary="Input ID of the fixed lever 'starting' trigger"></input>
<input name="Inp_LeverInputLeft" summary="Input ID of retractable lever on the left"></input>
<input name="Inp_LeverInputRight" summary="Input ID of retractable lever on the right"></input>
<input name="Inp_UltrasonicA" summary="Input ID of ultrasonic input 1 of 2"></input>
<input name="Inp_UltrasonicB" summary="Input ID of ultrasonic input 2 of 2"></input>
<output name="Out_PelletDispenser" summary="Output ID of feeder unit."><use>Dispenses on OFF->ON transition</use></output>
<output name="Out_LiquidDispenser" summary="Output ID of drinking unit."><use>Toggle liquid availability: OFF->Unavailable, ON->Available</use></output>
<output name="Out_LeftLeverRetract" summary="Output trigger to extend/retract left lever"><use>Toggle extended state of lever; OFF->Not extended, ON->Extended</use></output>
<output name="Out_RightLeverRetract" summary="Output trigger to extend/retract right lever"><use>Toggle extended state of lever; OFF->Not extended, ON->Extended</use></output>
<output name="Out_LickShockSwitch" summary="Output ID of ENV-250A Contact Lickometer switching unit."><use>OFF->Lickometer active, ON->Floor connected to shock emitter</use></output>
<output name="Out_Ultrasonic" summary="Output ID of ultrasonic recording unit."><use>???</use></output>
<output name="Out_ShockEmitter" summary="Output ID of shock unit."><use>Toggle shock delivery: OFF->No shock presently being delivered, ON->CONTINUOUS SHOCK PRESENTLY BEING DELIVERED</use></output>
<output name="Out_HouseLightRear" summary="Output ID of rear-most house light."><use>OFF->unlit, ON->lit</use></output>
<output name="Out_HouseLightMid" summary="Output ID of miidle house light."><use>OFF->unlit, ON->lit</use></output>
<output name="Out_HouseLightFront" summary="Output ID of front-most house light."><use>OFF->unlit, ON->lit</use></output>
<output name="Out_LedRed" summary="Output ID of Red LED (rearmost)."><use>OFF->unlit, ON->lit</use></output>
<output name="Out_LedGreen" summary="Output ID of Green LED (frontmost)."><use>OFF->unlit, ON->lit</use></output>
<output name="Out_LedYellow" summary="Output ID of Yellow LED (middle)."><use>OFF->unlit, ON->lit</use></output>
<constant group="audio" represents="delta" name="Snd_SPIncrement (not in use)" summary="Size of increment in sound pressure (in dB)"></constant>
<constant group="audio" represents="delta" name="Snd_FreqIncrement" summary="Size of increment in sound frequency (in Hz)"></constant>
<constant group="audio" represents="parameter" name="Snd_ToneBurstDuration" summary="Duration of the burst of sound (in ms)"></constant>
<constant group="audio" represents="parameter" name="Snd_InterBurstDuration" summary="Duration of pause between sound bursts (in ms)"></constant>
<constant group="audio" represents="parameter" name="Snd_SP" summary="Sound pressure at which to present tones (in dB)"></constant>
<constant group="audio" represents="parameter" name="Snd_RiseFallTime" summary="Rise/Fall time (in ms)"></constant>
<constant group="audio" represents="parameter" name="Snd_PreToneDelay" summary="Delay between trigger and first tone presentation (in ms)"></constant>
<constant group="shock" represents="parameter" name="Shk_IncorrectShockDuration" summary="Duration of the electrical shock for an incorrect response (in ms)"></constant>
<constant group="levers" represents="parameter" name="Lvr_RetractDelay" summary="Time (in s) to wait for levers to extend and retract"></constant>
<constant group="k-pulse" represents="parameter" name="KP_ExperimentEnd" summary="Trigger the experiment to end"></constant>
<constant group="z-pulse" represents="parameter" name="ZP_TerminateExperiment" summary="End the experiment - may be used if error occurrs"></constant>
<constant group="z-pulse" represents="parameter" name="ZP_StartVideoRec" summary="Start video recording"></constant>
<constant group="z-pulse" represents="parameter" name="ZP_EndVideoRec" summary="End video recording"></constant>
<constant group="z-pulse" represents="parameter" name="ZP_ExtendSipper" summary="Trigger extend sipper; set S for max # of sips before retraction"></constant>
<constant group="z-pulse" represents="parameter" name="ZP_SipperLimitHit" summary="Triggers when the sipper limit is hit; if S less than 0 then never triggered."></constant>
<constant group="z-pulse" represents="parameter" name="ZP_RetractSipper" summary="Trigger sipper retract, regardless of whether sipper limit hit"></constant>
<constant group="z-pulse" represents="parameter" name="ZP_ExperimentEnd" summary="Trigged to end the experiment"></constant>
<array name="J" outputName="Trials overview" outputStyle="cols" summary="Trial summary data">
<column name="J_CompletedTrials" outputName="Completed trials" summary="Total number of trials that have occurred so far"></column>
<column name="J_TotalMatchTrials" outputName="Matched tone pairs" summary="Total number of trials that have occurred with matched frequency"></column>
<column name="J_TotalMismatchTrials" outputName="Mismatched tone pairs" summary="Total number of trials that have occurred with unmatched frequency"></column>
<column name="J_CurrentHours" outputName="Duration hours" summary="Hours since commencement (for H:M:S.MS)"></column>
<column name="J_CurrentMinutes" outputName="Duration minutes" summary="Minutes since commencement (for H:M:S.MS)"></column>
<column name="J_CurrentSeconds" outputName="Duration seconds" summary="Seconds since commencement (for H:M:S.MS)"></column>
<column name="J_CurrentMilliseconds" outputName="Duration milliseconds" summary="Milliseconds since commencement (for H:M:S.MS) "></column>
<column name="J_LickTrials" outputName="Trials with licks" summary="Number of rewarded trials where licks have been taken"></column>
</array>
<array name="K" outputName="Trials" outputStyle="rows" summary="Specific trial data">
<column name="K_TrialNumber" outputName="Trial" summary="Number of this trial"></column>
<column name="K_TrialTimeHour" outputName="hour" summary="Time post-commencement (H) this trial occurred"></column>
<column name="K_TrialTimeMinute" outputName="minute" summary="Time post-commencement (M) this trial occurred"></column>
<column name="K_TrialTimeSecond" outputName="second" summary="Time post-commencement (S) this trial occurred"></column>
<column name="K_TrialTimeMillisecond" outputName="millisecond" summary="Time post-commencement (MS) this trial occurred"></column>
<column name="K_TrialMsec" outputName="Msec from start" summary="Time post-commencement (msec) this trial occurred TOTAL - Not related to H:M:S"></column>
<column name="K_Frequency1" outputName="First Frequency" summary="Frequency of first tone presented"></column>
<column name="K_Frequency2" outputName="Second frequency" summary="Frequency of second tone presented"></column>
<column name="K_SP1" outputName="First-tone SPL" summary="Sound Pressure of first tone presented (not in use)"></column>
<column name="K_SP2" outputName="Second-tone SPL" summary="Sound Pressure of second tone presented (not in use)"></column>
<column name="K_LickCount" outputName="Lick Count" summary="Number of licks taken"></column>
<column name="K_FirstLickDelay" outputName="First-lick delay" summary="Time (in msec) before first lick; -1 = NA"></column>
</array>
<constant group="general" represents="parameter" name="K_TrialIndexMultiplier" summary="Multiplier to be used for each trial"></constant>
<array name="H" outputName="Ultrasonics" outputStyle="rows" summary="Ultrasonic signal data">
<column name="H_StartHour" outputName="Start hour" summary="Hour of this event starting"></column>
<column name="H_StartMinute" outputName="Start minute" summary="Minute of this event starting"></column>
<column name="H_StartSecond" outputName="Start second" summary="Second of this event starting"></column>
<column name="H_StartMillisecond" outputName="Start millisecond" summary="Millisecond of this event starting"></column>
<column name="H_StartMsec" outputName="Start Msec (absolute)" summary="Absolute milliseconds of this event starting"></column>
<column name="H_EndHour" outputName="End hour" summary="Hour of this event ending"></column>
<column name="H_EndMinute" outputName="End minute" summary="Minute of this event ending"></column>
<column name="H_EndSecond" outputName="End second" summary="Second of this event ending"></column>
<column name="H_EndMillisecond" outputName="End millisecond" summary="Millisecond of this event ending"></column>
<column name="H_EndMsec" outputName="End Msec (absolute)" summary="Absolute milliseconds of this event ending"></column>
<column name="H_Band" outputName="Frequency band" summary="Which band led to the trigger"></column>
</array>
<constant group="general" represents="parameter" name="H_IndexMultiplier" summary="Multiplier to be used for each signal"></constant>
<array name="D" summary="List of first-tone frequency of pairs to be tested, generated pre-start from supplied list of frequencies">
<column name="DE_ToneFrequency" summary="Tone frequency being presented first in the pair"></column>
</array>
<array name="E" summary="List of second-tone frequency of pairs to be tested, generated pre-start from supplied list of frequencies">
<column name="DE_ToneFrequency" summary="Tone frequency being presented second in the pair"></column>
</array>
<array name="F" summary="Integer list (0x0-32x32) representing available tone combinations - used with RANDD to step through tone combinations randomly">
<column name="F_ToneConfigNumber" summary="Tone Configuration Number"></column>
</array>
<array name="I" summary="Integer list representing reward Z-values for reward delivery">
</array>
<!--<array name="B" summary="">
<column name="J_IncorrectMismatchTrials" summary="Incorrect number of trials that have occurred with unmatched frequency"></column>
</array>-->
<list name="Z" summary="List of frequencies available to test"></list>
<!--<variable name="" summary=""></variable>-->
<enum name="G_MatchOrMismatch" summary="Whether trial is a match or mismatch trial">
<option value="0" name="^G_MatchOrMismatch_Unset" summary="'Unset' state - if found in comparison, a problem has occurred"></option>
<option value="1" name="^G_MatchOrMismatch_Match" summary="The two presented tones are a match"></option>
<option value="2" name="^G_MatchOrMismatch_Mismatch" summary="The two presented tones are a mismatch"></option>
</enum>
<variable name="P" summary="Storage variable for camera state"></variable>
<variable name="Q" summary="Current offset for B array"></variable>
<variable name="S" summary="Number of sips remaining before sipper retract - set before using ZP_ExtendSipper"></variable>
<variable name="T" summary="Index of frequency pair to be used"></variable>
<variable name="U" summary="ID for reward to be given"></variable>
<variable name="W" summary="Iterator for building frequeny arrays"></variable>
<variable name="X" summary="Iterator for building frequeny arrays"></variable>
<variable name="Y" summary="Iterator for building frequeny arrays"></variable>
<variable name="V" summary="Temporary store for shuffling data to sound processor"></variable>
<variable name="L" summary="Timer - # of msec since commencement"></variable>
<variable name="M" summary="Timer - variable swapping 1"></variable>
<variable name="N" summary="Timer - variable swapping 2"></variable>
<stateset id="1" summary="Run the preparation and termination functions of the program">
<state id="1" summary="Set variables to default values">
</state>
<state id="2" summary="Generate the arrays of all possible tone combinations (D, E) which can be randomly selected from during tests.">
</state>
<state id="3" summary="Generate the arrays of all possible tone combinations (D, E) which can be randomly selected from during tests.">
</state>
<state id="9" summary="Pause until start command is issued; then convert used-data from ms to sec where required and continue. Presumably variables are set when start is triggered.">
</state>
<state id="10" summary="Wait for program termination">
</state>
<state id="10" summary="Turn off all outputs, save data and end">
</state>
</stateset>
<stateset id="2" summary="Operate the experiment functionally ">
<state id="1" summary="Wait for the start trigger">
</state>
<state id="2" summary="Wait for lever 1 press, then identify correct/incorrect levers and move to present tones">
</state>
<state id="6" summary="Pause for pre-delay then play first sound">
</state>
<state id="7" summary="Pause for inter-tone delay then play second sound">
</state>
<state id="8" summary="Wait the duration of the tone, then start timer and commence test">
</state>
<state id="10" summary="Delay 1 second then deliver reward">
</state>
<state id="16" summary="Give reward">
</state>
<state id="18" summary="Retract water unit">
</state>
<state id="21" summary="Switch off pellet unit (reset for next use)">
</state>
<state id="25" summary="Update trial data">
</state>
<state id="26" summary="Write trial summary data. Reset variables. Check if experiment is complete - if so, issue termination command">
</state>
</stateset>
<stateset id="7" summary="Timer - counts up in msec (in steps of 10 msec)">
<state id="1" summary="Wait for start trigger">
<state id="2" summary="Increment counter, hour, minutes, seconds, milliseconds">
</state>
</state>
</stateset>
<stateset id="20" summary="Camera management - connect to camera system and start/stop video">
<state id="1" summary="Set constants for video connection state">
</state>
<state id="2" summary="Wait for video commands">
</state>
</stateset>
<stateset id="21" summary="Capture ultrasonic A signal times">
<state id="1" summary="Wait for start signal">
</state>
<state id="2" summary="Wait for an ultrasonic signal; 2 sequential readings of ultrasonic sound are required - otherwise counted as a 'glitch'">
</state>
<state id="3" summary="Wait until no ultrasonic signal for 20ms, then reset to 'no-ultrasonic' state">
</state>
</stateset>
<stateset id="22" summary="Capture ultrasonic B signal times">
<state id="1" summary="Wait for start signal">
</state>
<state id="2" summary="Wait for an ultrasonic signal; 2 sequential readings of ultrasonic sound are required - otherwise counted as a 'glitch'">
</state>
<state id="3" summary="Wait until no ultrasonic signal for 20ms, then reset to 'no-ultrasonic' state">
</state>
</stateset>
<stateset id="23" summary="Operate the sipper">
<state id="1" summary="Wait for sipper extend (ZP_ExtendSipper) to be triggered">
</state>
<state id="3" summary="Extend sipper until ZP_RetractSipper occurs">
</state>
<state id="5" summary="Extend sipper until ZP_RetractSipper occurs or max sips hit">
</state>
</stateset>
<stateset id="24" summary="Count sips and add to each trial">
<state id="1" summary="Wait for sipper extend (ZP_ExtendSipper) to be triggered">
</state>
<state id="2" summary="Count number of sips until retraction occurs or sipper limit hit">
</state>
</stateset>
<stateset id="25" summary="Experiment timer - check if experiment has reached maximum duration">
<state id="1" summary="Wait for start trigger">
<state id="2" summary="Every cycle, check if max duration of experiment reached">
</state>
</state>
<state id="3" summary="Trigger a ZP_ExperimentEnd every 10ms - this will make sure that everything receives it even">
</state>
</stateset>
</program>
