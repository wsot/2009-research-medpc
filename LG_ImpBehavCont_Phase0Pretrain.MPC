\\\<?xml version="1.0" encoding="utf-8" standalone="yes"?>
\\\<?xml-stylesheet type="text/xsl" href="comments.xsl"?>
\\\
\\\<program>
\\\<researcher>
\\\ <name>Lisa Guccione</name>
\\\ <email>lisa_guccione@bigpond.com</email>
\\\</researcher>
\\\<study>Impulsive Behaviour Control</study>
\\\<title>Pretraining</title>
\\\<history>
\\\ <revision number="1.0">
\\\  <author>Simeon Morgan &lt;smorgan@students.latrobe.edu.au&gt;</author>
\\\  <created>2008-07-08 11:33</created>
\\\  <summary>First version</summary>
\\\ </revision>
\\\</history>

Y2KCOMPLIANT \\\Force use of 4-digit year

\\\<constant group="general" represents="parameter" name="Def_MaxDuration" summary="Default maximum duration (in minutes) for program to run"></constant>
^Def_MaxDuration = 30
\\\<constant group="general" represents="parameter" name="Abs_MaxTrials" summary="Limit on maximum number of trials to be recorded/processed"></constant>
^Abs_MaxTrials = 10000

\\\<constant group="general" represents="parameter" name="Def_RewardPellets" summary="Default number of licks for a reward"></constant>
^Def_RewardPellets = 1
\\\<constant group="general" represents="parameter" name="Def_InterTrialDelay" summary="Default time to pause between trials (s)"></constant>
^Def_InterTrialDelay = 2

\\\<constant group="general" represents="parameter" name="Lever_LeftLever" summary="Value used to represent left lever"></constant>
^Lever_LeftLever = 0
\\\<constant group="general" represents="parameter" name="Lever_RightLever" summary="Value used to represent right lever"></constant>
^Lever_RightLever = 1
\\\<constant group="general" represents="parameter" name="Lever_CentreLever" summary="Value used to represent Centre lever"></constant>
^Lever_CentreLever = 2

\\\<constant group="general" represents="parameter" name="Lights_UseHouseRear" summary="Whether to use rear house light (No=0 Yes=1)"></constant>
^Lights_UseHouseRear = 0
\\\<constant group="general" represents="parameter" name="Lights_UseHouseMid" summary="Whether to use middle house light (No=0 Yes=1)"></constant>
^Lights_UseHouseMid = 1
\\\<constant group="general" represents="parameter" name="Lights_UseHouseFront" summary="Whether to use front house light (No=0 Yes=1)"></constant>
^Lights_UseHouseFront = 0

\\\<array name="C" outputName="Configuration" summary="Operational variables - should not change over the duration of the task once set">
DIM C = 7
\\\<column name="C_MaxDuration" outputName="Max Duration" summary="Maximum time before automatic termination (minutes)"></column>
^C_MaxDuration = 0
\\\<column name="C_MaxDurationMsec" summary="Maximum time before automatic termination in msec (autogenerated)"></column>
^C_MaxDurationMsec = 1
\\\<column name="C_RewardPellets" outputName="Reward pellets" summary="Number off pellets given for reward"></column>
^C_RewardPellets = 2
\\\<column name="C_CamUnconnectedState" summary="Used to store 'Unconnected' StateID of camera"></column>
^C_CamUnconnectedState = 3
\\\<column name="C_CamConnectOkState" summary="Used to store 'Ok' StateID of camera"></column>
^C_CamConnectOkState = 4
\\\<column name="C_CamConnectFailState" summary="Used to store 'Fail' StateID of camera"></column>
^C_CamConnectFailState = 5
\\\<column name="C_InterTrialDelaySec" outputName="Inter-trial delay" summary="The pause between dispensing pellets and reseting to detect new head entry for new reward (s)"></column>
^C_InterTrialDelaySec = 6
\\\<column name="C_InterTrialDelayMsec" summary="The pause between dispensing pellets and reseting to detect new head entry for new reward (msec) - calculated"></column>
^C_InterTrialDelayMsec = 7
\\\</array>

\\\Control Variables 
\\\<!--<variable alias="" name="" summary=""></variable>-->
\\\<variable alias="Maximum Duration" name="C(^C_MaxDuration)" summary="Maximum time before automatic termination"></variable>
Var_Alias Maximum Time (minutes)					= C(0)
\\\<variable alias="Reward Pellet Count" name="C(^C_RewardPellets)" summary="How many pellets are dispensed for reward"></variable>
Var_Alias Reward Pellet Count							= C(2)
\\\<variable alias="Inter-trial delay" name="C(^C_InterTrialDelay)" summary="Delay between a reward being delivered and the head entry becoming active again"></variable>
Var_Alias Inter-trial delay							= C(6)

\\\Example comment line <!--<constant represents="input|output|other" name="LeverTrigger" summary="Input ID of the fixed lever 'starting' trigger"></constant>-->

\\\Constant block
\\\<input name="Inp_HeadEntry" summary="Input ID of the head entry unit on pellet dispenser"></input>
^Inp_HeadEntry = 1
\\\<input name="Inp_Lickometer" summary="Input ID of the lickometer"></input>
^Inp_Lickometer = 2
\\\<input name="Inp_LeverTrigger" summary="Input ID of the fixed lever 'starting' trigger"></input>
^Inp_LeverTrigger = 3
\\\<input name="Inp_LeverInputLeft" summary="Input ID of retractable lever on the left"></input>
^Inp_LeverInputLeft = 4
\\\<input name="Inp_LeverInputRight" summary="Input ID of retractable lever on the right"></input>
^Inp_LeverInputRight = 5
\\\<input name="Inp_UltrasonicA" summary="Input ID of ultrasonic input 1 of 2"></input>
^Inp_UltrasonicA = 6
\\\<input name="Inp_UltrasonicB" summary="Input ID of ultrasonic input 2 of 2"></input>
^Inp_UltrasonicB = 7

\\\<output name="Out_PelletDispenser" summary="Output ID of feeder unit."><use>Dispenses on OFF->ON transition</use></output>
^Out_PelletDispenser = 1
\\\<output name="Out_LiquidDispenser" summary="Output ID of drinking unit."><use>Toggle liquid availability: OFF->Unavailable, ON->Available</use></output>
^Out_LiquidDispenser = 2
\\\<output name="Out_LeftLeverRetract" summary="Output trigger to extend/retract left lever"><use>Toggle extended state of lever; OFF->Not extended, ON->Extended</use></output>
^Out_LeftLeverRetract = 3
\\\<output name="Out_RightLeverRetract" summary="Output trigger to extend/retract right lever"><use>Toggle extended state of lever; OFF->Not extended, ON->Extended</use></output>
^Out_RightLeverRetract = 4
\\\<output name="Out_LickShockSwitch" summary="Output ID of ENV-250A Contact Lickometer switching unit."><use>OFF->Lickometer active, ON->Floor connected to shock emitter</use></output>
^Out_LickShockSwitch = 5
\\\<output name="Out_Ultrasonic" summary="Output ID of ultrasonic recording unit."><use>???</use></output>
^Out_Ultrasonic = 6
\\\<output name="Out_ShockEmitter" summary="Output ID of shock unit."><use>Toggle shock delivery: OFF->No shock presently being delivered, ON->CONTINUOUS SHOCK PRESENTLY BEING DELIVERED</use></output>
^Out_ShockEmitter = 7
\\\<output name="Out_HouseLightRear" summary="Output ID of rear-most house light."><use>OFF->unlit, ON->lit</use></output>
^Out_HouseLightRear = 9
\\\<output name="Out_HouseLightMid" summary="Output ID of miidle house light."><use>OFF->unlit, ON->lit</use></output>
^Out_HouseLightMid = 10
\\\<output name="Out_HouseLightFront" summary="Output ID of front-most house light."><use>OFF->unlit, ON->lit</use></output>
^Out_HouseLightFront = 11
\\\<output name="Out_LedRed" summary="Output ID of Red LED (rearmost)."><use>OFF->unlit, ON->lit</use></output>
^Out_LedRed = 12
\\\<output name="Out_LedGreen" summary="Output ID of Green LED (frontmost)."><use>OFF->unlit, ON->lit</use></output>
^Out_LedGreen = 13
\\\<output name="Out_LedYellow" summary="Output ID of Yellow LED (middle)."><use>OFF->unlit, ON->lit</use></output>
^Out_LedYellow = 14
\\\<output name="Out_TrayLight" summary="Output ID of Tray light (shared output # with yellow LED)."><use>OFF->unlit, ON->lit</use></output>
^Out_TrayLight = 14

\\\<constant group="z-pulse" represents="parameter" name="ZP_TerminateExperiment" summary="End the experiment - may be used if error occurrs"></constant>
^ZP_TerminateExperiment = 1
\\\<constant group="z-pulse" represents="parameter" name="ZP_ExperimentEnd" summary="Trigged to end the experiment"></constant>
^ZP_ExperimentEnd = 2
\\\<constant group="k-pulse" represents="parameter" name="KP_ExperimentEnd" summary="Trigger the experiment to end"></constant>
^KP_ExperimentEnd = 1

\\\<constant group="z-pulse" represents="parameter" name="ZP_HouseLightsOn" summary="Turn on house lights"></constant>
^ZP_HouseLightsOn = 3
\\\<constant group="z-pulse" represents="parameter" name="ZP_HouseLightsOff" summary="Turn off house lights"></constant>
^ZP_HouseLightsOff = 4

\\\<constant group="z-pulse" represents="parameter" name="ZP_GivePellets" summary="Dispense the number of pellets provided by S"></constant>
^ZP_GivePellets = 5
\\\<constant group="z-pulse" represents="parameter" name="ZP_PelletsGiven" summary="Triggered when the full number of pellets has been delivered (number = S)"></constant>
^ZP_PelletsGiven = 6

\\\<constant group="z-pulse" represents="parameter" name="ZP_StartVideoRec" summary="Start video recording"></constant>
^ZP_StartVideoRec = 7
\\\<constant group="z-pulse" represents="parameter" name="ZP_EndVideoRec" summary="End video recording"></constant>
^ZP_EndVideoRec = 8

\\\<constant group="z-pulse" represents="parameter" name="ZP_TimerStart" summary="Used to start a 'timer' which will trigger a ZP_TimerReached when time passed - set V with delay milliseconds"></constant>
^ZP_TimerStart = 9
\\\<constant group="z-pulse" represents="parameter" name="ZP_TimerReached" summary="Triggered when the timer is triggered, and then reached"></constant>
^ZP_TimerReached = 10


\\\ARRAYS
\\\<array name="A" outputName="Trial overview" summary="Trial summary data">
DIM A = 6
\\\<column name="A_CompletedTrials" outputName="Total trials" summary="The number of trials that have already been completed"></column>
^A_CompletedTrials = 0
\\\<column name="A_CurrentHours" outputName="Hours" summary="Hours since commencement (for H:M:S.MS)"></column>
^A_CurrentHours = 1
\\\<column name="A_CurrentMinutes" outputName="Minutes" summary="Minutes since commencement (for H:M:S.MS)"></column>
^A_CurrentMinutes = 2
\\\<column name="A_CurrentSeconds" outputName="Seconds" summary="Seconds since commencement (for H:M:S.MS)"></column>
^A_CurrentSeconds = 3
\\\<column name="A_CurrentMilliseconds" outputName="Milliseconds" summary="Milliseconds since commencement (for H:M:S.MS)"></column>
^A_CurrentMilliseconds = 4
\\\<column name="A_SuccessfulTrials" outputName="Successful Trials" summary="The number of trials which gathered rewards"></column>
^A_SuccessfulTrials = 5
\\\</array>

\\\<array name="B" outputName="Trials" summary="Specific trial data">
DIM B = 80000 \ we wish it could be (^Gen_MaxTrials * B_TrialIndexMultiplier) - 1
\\\<column name="B_TrialNumber" outputName="Trial" summary="Number of this trial"></column>
^B_TrialNumber = 0
\\\<column name="B_TrialTimeHour" outputName="Hour" summary="Time post-commencement (H) this trial occurred"></column>
^B_TrialTimeHour = 1
\\\<column name="B_TrialTimeMinute" outputName="Minute" summary="Time post-commencement (M) this trial occurred"></column>
^B_TrialTimeMinute = 2
\\\<column name="B_TrialTimeSecond" outputName="Second" summary="Time post-commencement (S) this trial occurred"></column>
^B_TrialTimeSecond = 3
\\\<column name="B_TrialTimeMillisecond" outputName="Millisecond" summary="Time post-commencement (MS) this trial occurred"></column>
^B_TrialTimeMillisecond = 4
\\\<column name="B_TrialMsec" outputName="Msec from start" summary="Time post-commencement (msec) this trial occurred TOTAL - Not related to H:M:S"></column>
^B_TrialMsec = 5
\\\<column name="B_RewardGiven" outputName="Rewarded?" summary="Whether reward was given (0=No  1=Yes) (not given if >2 hits on same lever)"></column>
^B_RewardGiven = 6
\\\</array>
\\\<constant group="general" represents="parameter" name="B_TrialIndexMultiplier" summary="Multiplier to be used for each trial"></constant>
^B_TrialIndexMultiplier = 7


\\\Variable declarations
\\\<!--<variable name="" summary=""></variable>-->
\\\<variable name="P" summary="Storage variable for camera state"></variable>
\\\<variable name="Q" summary="Current offset for B array"></variable>
\\\<variable name="R" summary="Inter-trial pause (generated)"></variable>
\\\<variable name="S" summary="Number of pellets to give - set before using ZP_GivePellets"></variable>
\\\<variable name="T" summary="Timer - # of msec since commencement"></variable>
\\\<variable name="U" summary="Timer - variable swapping 1"></variable>
\\\<variable name="W" summary="Timer - variable swapping 2"></variable>
\\\<variable name="Y" summary="Time remaining in countdouwn timer (msec)"></variable>
\\\<variable name="V" summary="Duration timer - Time to be delayed before ZP_TimerReached in milliseconds"></variable>


\\\<stateset id="1" summary="Run the preparation and termination functions of the program">
S.S.1,
\\\<state id="1" summary="Set variables to default values">
S1,
	0":;
		SET C(^C_MaxDuration) = ^Def_MaxDuration;
		SET C(^C_RewardPellets) = ^Def_RewardPellets;
		SET C(^C_InterTrialDelaySec) = ^Def_InterTrialDelay;
		---> S5
\\\</state>
\\\<state id="5" summary="Pause until start command is issued; Update displayed variables.">
S5,
	#START:;
		Z^ZP_StartVideoRec;
		---> S10
	0.01":;
		SHOW 1, Max Duration, C(^C_MaxDuration);
		SHOW 2, Time Remaining, C(^C_MaxDuration);
		SHOW 3, Completed Trials, 0;
		SHOW 4, Rewarded Trials, 0;
		SHOW 5, Awaiting start, 0;
		SHOW 12, Reward pellets, C(^C_RewardPellets); 
		SET C(^C_InterTrialDelayMsec) = C(^C_InterTrialDelaySec) * 1000; \convert seconds to milliseconds
		SET C(^C_MaxDurationMsec) = C(^C_MaxDuration) * 60000; \convert minutes to milliseconds
		---> SX
\\\</state>
\\\<state id="10" summary="Wait for program termination">
S10,
	#Z^ZP_TerminateExperiment:;
		SHOW 5, Finished, 2;
		SET B(Q + ^B_TrialIndexMultiplier + ^B_TrialNumber) = -987.987;
		---> S20

\\\</state>
\\\<state id="10" summary="Turn off all outputs, save data and end">
S20,   
  0.1":;
  	---> STOPABORTFLUSH
\\\</state>
\\\</stateset>


\\\<stateset id="2" summary="Operate the experiment functionally">
S.S.2,
\\\<state id="1" summary="Wait for the start trigger">
S1,
	#START:;
		Z^ZP_HouseLightsOn;
		---> S3
\\\</state>
\\\<state id="3" summary="Update trial data, reset tray light">
S3,
  #Z^ZP_ExperimentEnd:; \\duration of experiment reached - issue termination and stop
		Z^ZP_TerminateExperiment;
		---> S32
	0":;
		SHOW 5, Running, 1;
		ON ^Out_TrayLight;
			---> S5

\\\</state>
\\\<state id="5" summary="Wait for head entry">
S5,
  #Z^ZP_ExperimentEnd:; \\duration of experiment reached - issue termination and stop
		Z^ZP_TerminateExperiment;
		---> S32
  #R^Inp_HeadEntry:;
		---> S6
\\\</state>
\\\<state id="6" summary="Record entry; Turn off tray light; give reward">
S6,
	0":;
		OFF ^Out_TrayLight;
		SHOW 7, Reward given, 1;
		ADD A(^A_SuccessfulTrials);
		SET Q = A(^A_CompletedTrials) * ^B_TrialIndexMultiplier;
		SET B(Q + ^B_TrialNumber) = A(^A_CompletedTrials);
		SET B(Q + ^B_TrialTimeHour) = A(^A_CurrentHours), B(Q + ^B_TrialTimeMinute) = A(^A_CurrentMinutes), B(Q + ^B_TrialTimeSecond) = A(^A_CurrentSeconds), B(Q + ^B_TrialTimeMillisecond) = A(^A_CurrentMilliseconds);
		SET B(Q + ^B_TrialMsec) = T;
		SET B(Q + ^B_RewardGiven) = 1;
		SET S = C(^C_RewardPellets);
		Z^ZP_GivePellets;
		SHOW 30, Jump to state, 7;
		---> S7
\\\</state>
\\\<state id="7" summary="Wait until all pellets given">
S7,
	#Z^ZP_PelletsGiven:;
		SHOW 30, Jump to state, 8;
		SET V = C(^C_InterTrialDelayMsec);
		Z^ZP_TimerStart;
		---> S8
\\\</state>
\\\<state id="8" summary="Delay for defined duration C(^C_InterTrialDelay)">
S8,
	#Z^ZP_TimerReached:;
		SHOW 30, Jump to state, 31;
		---> S31
\\\</state>
\\\<state id="31" summary="Update trail information, then reset.">
S31,
	0":;
		ADD A(^A_CompletedTrials);
		SHOW 3, Completed Trials, A(^A_CompletedTrials);
		SHOW 4, Rewarded Trials, A(^A_SuccessfulTrials);
		SHOW 41 + (A(^A_SuccessfulTrials) * 2), Trial, A(^A_SuccessfulTrials);
		SHOW 30, Jump to state, 3;
		---> S3
\\\</state>
\\\</stateset>


\\\<stateset id="3" summary="Operate the pellet dispenser">
S.S.3,
\\\<state id="1" summary="Wait for give pellets (ZP_GivePellets) to be triggered">
S1,
	#Z^ZP_GivePellets:;
		IF S > 0 [@have pellet count to give, @give no pellets]
			@have pellets to give:;
				ON ^Out_PelletDispenser;
				SUB S;
				SHOW 40, Pellets remaining, S;
				---> S2
			@give no pellets:;
				Z^ZP_PelletsGiven;
				---> S1
\\\</state>
\\\<state id="2" summary="Pause 100ms between pellet dispenser trigger going high and back to low">
S2,
	0.1":;
		OFF ^Out_PelletDispenser;
		---> S3
\\\</state>
\\\<state id="3" summary="Drop pellets until full number of reward pellets reached">
S3,
	0.4":;
		IF S > 0 [@still pellets to drop, @sufficient pellets]
			@still pellets to drop:;
				SUB S;
				ON ^Out_PelletDispenser;
				SHOW 40, Pellets remaining, S;
				---> S2
			@sufficient pellets:;
				Z^ZP_PelletsGiven;
				---> S1
\\\</state>
\\\</stateset>

\\\<stateset id="5" summary="Control house light system">
S.S.5,
\\\<state id="1" summary="Wait for lighting change command">
S1,
	#Z^ZP_HouseLightsOn:; \if split, then could be problems due to temporal precision
		IF ^Lights_UseHouseRear = 1 [@switch on rear light, @do not switch on rear light]
			@switch on rear light:;
				ON ^Out_HouseLightRear;
				IF ^Lights_UseHouseMid = 1 [@switch on mid light, @do not switch on mid light]
					@switch on mid light:;
						ON ^Out_HouseLightMid;
						IF ^Lights_UseHouseFront = 1 [@switch on front light]
							@switch on front light:;
								ON ^Out_HouseLightFront;
									---> SX
					@do not switch on mid light:;
						IF ^Lights_UseHouseFront = 1 [@switch on front light]
							@switch on front light:;
								ON ^Out_HouseLightFront;
									---> SX
			@do not switch on rear light:;
					IF ^Lights_UseHouseMid = 1 [@switch on mid light, @do not switch on mid light]
					@switch on mid light:;
						ON ^Out_HouseLightMid;
						IF ^Lights_UseHouseFront = 1 [@switch on front light]
							@switch on front light:;
								ON ^Out_HouseLightFront;
									---> SX
					@do not switch on mid light:;
						IF ^Lights_UseHouseFront = 1 [@switch on front light]
							@switch on front light:;
								ON ^Out_HouseLightFront;
									---> SX
	#Z^ZP_HouseLightsOff:; 
		OFF ^Out_HouseLightRear;
		OFF ^Out_HouseLightMid;
		OFF ^Out_HouseLightFront;
		---> SX
	#Z^ZP_TerminateExperiment:;
		---> S32
\\\</state>
\\\</stateset>

\\\<stateset id="7" summary="Timer - counts up in msec (in steps of 10 msec)">
S.S.7,
\\\<state id="1" summary="Wait for start trigger">
S1,
	#START:;
		---> S2
\\\<state id="2" summary="Increment counter, hour, minutes, seconds, milliseconds">
\\\</state>
S2,
	0.01":;
		SET T = T + 10;
		SET A(^A_CurrentMilliseconds) = A(^A_CurrentMilliseconds) + 10;
		SET U = A(^A_CurrentMilliseconds), W = A(^A_CurrentSeconds);
		~ IF (U = 1000) then begin U := 0; W := W + 1; end; ~;
		SET A(^A_CurrentMilliseconds) = U, U = W, W = A(^A_CurrentMinutes);
		~ IF (U = 60) then begin U := 0; W := W + 1; end; ~;
		SET A(^A_CurrentSeconds) = U, U = W, W = A(^A_CurrentHours);
		~ IF (U = 60) then begin U := 0; W := W + 1; end; ~;
		SET A(^A_CurrentMinutes) = U, A(^A_CurrentHours) = W;
		SHOW 20, Hours, A(^A_CurrentHours);
		SHOW 21, Minutes, A(^A_CurrentMinutes);
		SHOW 22, Seconds, A(^A_CurrentSeconds);
		SHOW 23, Milliseconds, A(^A_CurrentMilliseconds);

			---> SX
	#Z^ZP_TerminateExperiment:;
		---> S32
\\\</state>
\\\</stateset>

\\\<stateset id="9" summary="Experiment timer - check if experiment has reached maximum duration">
S.S.9,
\\\<state id="1" summary="Wait for start trigger">
S1,
	#START:;
		---> S2
\\\<state id="2" summary="Every cycle, check if max duration of experiment reached">
\\\</state>
S2,
	#K^KP_ExperimentEnd:;
				SHOW 5, Manually terminated, 0;
				---> S3
	0.01":;
		SHOW 2, Remaining Time (m.s), ((C(^C_MaxDuration) - (A(^A_CurrentHours) * 60) - A(^A_CurrentMinutes)) - ((A(^A_CurrentSeconds) + 40) / 100));
		IF T >= C(^C_MaxDurationMsec) [@hit max time]
			@hit max time:;
				SHOW 2, Max Time Reached, 0;
				---> S3
\\\</state>
\\\<state id="3" summary="Trigger a ZP_ExperimentEnd every 10ms - this will make sure that everything receives it even">
S3,
	0.01":;
		Z^ZP_ExperimentEnd;
		---> SX
\\\</state>
\\\</stateset>

\\\<stateset id="11" summary="General timer - when triggered, waing X milliseconds, then respond with a trigger">
S.S.11,
\\\<state id="1" summary="Wait for start trigger">
S1,
	#Z^ZP_TimerStart:;
		SET Y = V - 10; \have to subtract 10 msec for the time taken to get to the next state
		---> S2
\\\<state id="2" summary="Every cycle, check if max duration of experiment reached">
\\\</state>
S2,
	0.01":;
		SET Y = Y - 10;
		SHOW 5, Current step timer (msec), Y;
		IF Y <= 0 [@countdown finished]
			@countdown finished:;
				Z^ZP_TimerReached;
				---> S1
	#Z^ZP_TimerStart:;
		SET Y = V - 10;
		---> S2
	#Z^ZP_TerminateExperiment:;
		---> S32
\\\</state>
\\\</stateset>


\\\<stateset id="15" summary="Camera management - connect to camera system and start/stop video">
S.S.15,
\\\<state id="1" summary="Set constants for video connection state">
S1,
	0":;
		~P := UNCONNECTED;~;
		SET C(^C_CamUnconnectedState) = P;
        ~P := CONNECT_OK;~;
		SET C(^C_CamConnectOkState) = P;
        ~P := CONNECT_FAIL;~;
		SET C(^C_CamConnectFailState) = P;
		---> S2
\\\</state>
\\\<state id="2" summary="Wait for video commands">
S2,
	#Z^ZP_StartVideoRec:;
		~ IF ((box = 1) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX1', StartSavingEvent, 'StartEvent'); end; ~;
		~ IF ((box = 2) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX2', StartSavingEvent, 'StartEvent'); end; ~;
		~ IF ((box = 3) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX3', StartSavingEvent, 'StartEvent'); end; ~;
		~ IF ((box = 4) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX4', StartSavingEvent, 'StartEvent'); end; ~;
		---> SX
	#Z^ZP_EndVideoRec:;
		~ IF ((box = 1) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX1', StopSavingEvent, 'StopEvent'); end; ~;
		~ IF ((box = 2) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX2', StopSavingEvent, 'StopEvent'); end; ~;
		~ IF ((box = 3) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX3', StopSavingEvent, 'StopEvent'); end; ~;
		~ IF ((box = 4) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX4', StopSavingEvent, 'StopEvent'); end; ~;
		---> SX
	#Z^ZP_TerminateExperiment:;
		~ IF ((box = 1) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX1', StopSavingEvent, 'StopEvent'); end; ~;
		~ IF ((box = 2) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX2', StopSavingEvent, 'StopEvent'); end; ~;
		~ IF ((box = 3) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX3', StopSavingEvent, 'StopEvent'); end; ~;
		~ IF ((box = 4) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX4', StopSavingEvent, 'StopEvent'); end; ~;

		~ IF ((box = 1) and (P = CONNECT_OK)) then begin DisconnectVM('.', 'BOX1'); O := GetIfaceStatus();end;~;
		~ IF ((box = 2) and (P = CONNECT_OK)) then begin DisconnectVM('.', 'BOX2'); O := GetIfaceStatus();end;~;
		~ IF ((box = 3) and (P = CONNECT_OK)) then begin DisconnectVM('.', 'BOX3'); O := GetIfaceStatus();end;~;
		~ IF ((box = 4) and (P = CONNECT_OK)) then begin DisconnectVM('.', 'BOX4'); O := GetIfaceStatus();end;~;
		---> S32
	0.1":;
		~ IF ((box = 1) and (P <> CONNECT_OK)) then begin ConnectToVMEx(MG, BOX, '.', 'BOX1'); P := GetIfaceStatus();end;~;
		~ IF ((box = 2) and (P <> CONNECT_OK)) then begin ConnectToVMEx(MG, BOX, '.', 'BOX2'); P := GetIfaceStatus();end;~;
		~ IF ((box = 3) and (P <> CONNECT_OK)) then begin ConnectToVMEx(MG, BOX, '.', 'BOX3'); P := GetIfaceStatus();end;~;
		~ IF ((box = 4) and (P <> CONNECT_OK)) then begin ConnectToVMEx(MG, BOX, '.', 'BOX4'); P := GetIfaceStatus();end;~;
		IF (P = C(^C_CamUnconnectedState)) [@UNCON, @OTHER]
			 @UNCON: SHOW 14, Video Unconnected,0 ---> SX
             @OTHER: IF (P = C(^C_CamConnectOkState)) [@CONNECTED, @OTHER2]
                @CONNECTED: SHOW 14, Video OK,0 ---> SX
                @OTHER2: IF (P = C(^C_CamConnectFailState)) [@FAIL, @OTHER3]
                   @FAIL:   SHOW 14, Video Failed,0 ---> SX
                   @OTHER3: SHOW 14, Video Unknown,0  ---> SX
\\\</state>
\\\</stateset>
\\\</program>
