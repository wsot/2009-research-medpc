\\\<?xml version="1.0" encoding="utf-8" standalone="yes"?>
\\\<?xml-stylesheet type="text/xsl" href="comments.xsl"?>
\\\
\\\<program>
\\\<researcher>
\\\ <name>Lisa Guccione</name>
\\\ <email>lisa_guccione@bigpond.com</email>
\\\</researcher>
\\\<study>Impulsive Behaviour Control</study>
\\\<title>Training 2</title>
\\\<history>
\\\ <revision number="1.0">
\\\  <author>Simeon Morgan &lt;smorgan@students.latrobe.edu.au&gt;</author>
\\\  <created>2008-07-09 08:46</created>
\\\  <summary>First version</summary>
\\\ </revision>
\\\</history>

Y2KCOMPLIANT \\\Force use of 4-digit year

\\\<constant group="general" represents="parameter" name="Def_MaxTrials" summary="Default maximum number of trials for program to run"></constant>
^Def_MaxTrials = 90
\\\<constant group="general" represents="parameter" name="Abs_MaxTrials" summary="Limit on maximum number of trials to be recorded/processed"></constant>
^Abs_MaxTrials = 10000

\\\<constant group="general" represents="parameter" name="Def_RewardPellets" summary="Default number of pellets for a reward"></constant>
^Def_RewardPellets = 2

\\\<constant group="general" represents="parameter" name="Def_LightAfterRewardTime" summary="Default time to have lights remain on after reward is delivered"></constant>
^Def_LightAfterRewardTime = 10
\\\<constant group="general" represents="parameter" name="Def_InterTrialDelay" summary="Delay between tray light turning off and new trial starting"></constant>
^Def_InterTrialDelay = 10

\\\<constant group="general" represents="parameter" name="Def_LightsOffBetweenTrials" summary="Whether house lights should be turned off between trials (No=0 Yes=1)"></constant>
^Def_LightsOffBetweenTrials = 10

\\\<constant group="general" represents="parameter" name="Lever_LeftLever" summary="Value used to represent left lever"></constant>
^Lever_LeftLever = 0
\\\<constant group="general" represents="parameter" name="Lever_RightLever" summary="Value used to represent right lever"></constant>
^Lever_RightLever = 1
\\\<constant group="general" represents="parameter" name="Lever_CentreLever" summary="Value used to represent Centre lever"></constant>
^Lever_CentreLever = 2

\\\<constant group="general" represents="parameter" name="Lights_UseHouseRear" summary="Whether to use rear house light (No=0 Yes=1)"></constant>
^Lights_UseHouseRear = 0
\\\<constant group="general" represents="parameter" name="Lights_UseHouseMid" summary="Whether to use middle house light (No=0 Yes=1)"></constant>
^Lights_UseHouseMid = 1
\\\<constant group="general" represents="parameter" name="Lights_UseHouseFront" summary="Whether to use front house light (No=0 Yes=1)"></constant>
^Lights_UseHouseFront = 0

\\\<array name="C" outputName="Configuration" summary="Operational variables - should not change over the duration of the task once set">
DIM C = 7
\\\<column name="C_MaxTrials" outputName="Max Trials" summary="Maximum time before automatic termination (minutes)"></column>
^C_MaxTrials = 0
\\\<column name="C_RewardPellets" outputName="Reward Pellets" summary="Number off pellets permitted for small reward"></column>
^C_RewardPellets = 1
\\\<column name="C_CamUnconnectedState" summary="Used to store 'Unconnected' StateID of camera"></column>
^C_CamUnconnectedState = 2
\\\<column name="C_CamConnectOkState" summary="Used to store 'Ok' StateID of camera"></column>
^C_CamConnectOkState = 3
\\\<column name="C_CamConnectFailState" summary="Used to store 'Fail' StateID of camera"></column>
^C_CamConnectFailState = 4
\\\<column name="C_LightAfterRewardTime" outputName="Light after reward time" summary="Duration that tray light remains on after reward (s)"></column>
^C_LightAfterRewardTime = 5
\\\<column name="C_InterTrialDelay" outputName="Inter trial delay" summary="Delay between tray light turning off after reward, and new trial starting (s)"></column>
^C_InterTrialDelay = 6
\\\<column name="C_LightsOffBetweenTrials" outputName="Lights off between trials" summary="Whether house lights should be turned off between trials (No=0 Yes=1)"></column>
^C_LightsOffBetweenTrials = 7
\\\</array>

\\\Control Variables 
\\\<!--<variable alias="" name="" summary=""></variable>-->
\\\<variable alias="Maximum Duration" name="C(^C_MaxTrials)" summary="Maximum trials before automatic termination"></variable>
Var_Alias Maximum Trials							= C(0)
\\\<variable alias="Reward Pellets Count" name="C(^C_RewardPellets)" summary="How many pellets are given for reward"></variable>
Var_Alias Reward Pellet Count							= C(1)
\\\<variable alias="Light after reward time" name="C(^C_LightAfterRewardTime)" summary="How long the tray light remains on after a reward"></variable>
Var_Alias Light duration after reward (sec)							= C(5)
\\\<variable alias="Inter-trial delay" name="C(^C_InterTrialDelay)" summary="Delay between tray light turning off after reward, and new trial starting"></variable>
Var_Alias Inter-trial delay (sec)							= C(6)
\\\<variable alias="Lights off between trials (No=0 Yes=1)" name="C(^C_LightsOffBetweenTrials)" summary="Whether house lights should be turned off between trials (No=0 Yes=1)"></variable>
Var_Alias Lights off between trials (No=0 Yes=1)							= C(7)


\\\Example comment line <!--<constant represents="input|output|other" name="LeverTrigger" summary="Input ID of the fixed lever 'starting' trigger"></constant>-->

\\\Constant block
\\\<input name="Inp_HeadEntry" summary="Input ID of the head entry unit on pellet dispenser"></input>
^Inp_HeadEntry = 1
\\\<input name="Inp_Lickometer" summary="Input ID of the lickometer"></input>
^Inp_Lickometer = 2
\\\<input name="Inp_LeverTrigger" summary="Input ID of the fixed lever 'starting' trigger"></input>
^Inp_LeverTrigger = 3
\\\<input name="Inp_LeverInputLeft" summary="Input ID of retractable lever on the left"></input>
^Inp_LeverInputLeft = 4
\\\<input name="Inp_LeverInputRight" summary="Input ID of retractable lever on the right"></input>
^Inp_LeverInputRight = 5
\\\<input name="Inp_UltrasonicA" summary="Input ID of ultrasonic input 1 of 2"></input>
^Inp_UltrasonicA = 6
\\\<input name="Inp_UltrasonicB" summary="Input ID of ultrasonic input 2 of 2"></input>
^Inp_UltrasonicB = 7

\\\<output name="Out_PelletDispenser" summary="Output ID of feeder unit."><use>Dispenses on OFF->ON transition</use></output>
^Out_PelletDispenser = 1
\\\<output name="Out_LiquidDispenser" summary="Output ID of drinking unit."><use>Toggle liquid availability: OFF->Unavailable, ON->Available</use></output>
^Out_LiquidDispenser = 2
\\\<output name="Out_LeftLeverRetract" summary="Output trigger to extend/retract left lever"><use>Toggle extended state of lever; OFF->Not extended, ON->Extended</use></output>
^Out_LeftLeverRetract = 3
\\\<output name="Out_RightLeverRetract" summary="Output trigger to extend/retract right lever"><use>Toggle extended state of lever; OFF->Not extended, ON->Extended</use></output>
^Out_RightLeverRetract = 4
\\\<output name="Out_LickShockSwitch" summary="Output ID of ENV-250A Contact Lickometer switching unit."><use>OFF->Lickometer active, ON->Floor connected to shock emitter</use></output>
^Out_LickShockSwitch = 5
\\\<output name="Out_Ultrasonic" summary="Output ID of ultrasonic recording unit."><use>???</use></output>
^Out_Ultrasonic = 6
\\\<output name="Out_ShockEmitter" summary="Output ID of shock unit."><use>Toggle shock delivery: OFF->No shock presently being delivered, ON->CONTINUOUS SHOCK PRESENTLY BEING DELIVERED</use></output>
^Out_ShockEmitter = 7
\\\<output name="Out_HouseLightRear" summary="Output ID of rear-most house light."><use>OFF->unlit, ON->lit</use></output>
^Out_HouseLightRear = 9
\\\<output name="Out_HouseLightMid" summary="Output ID of miidle house light."><use>OFF->unlit, ON->lit</use></output>
^Out_HouseLightMid = 10
\\\<output name="Out_HouseLightFront" summary="Output ID of front-most house light."><use>OFF->unlit, ON->lit</use></output>
^Out_HouseLightFront = 11
\\\<output name="Out_LedRed" summary="Output ID of Red LED (rearmost)."><use>OFF->unlit, ON->lit</use></output>
^Out_LedRed = 12
\\\<output name="Out_LedGreen" summary="Output ID of Green LED (frontmost)."><use>OFF->unlit, ON->lit</use></output>
^Out_LedGreen = 13
\\\<output name="Out_LedYellow" summary="Output ID of Yellow LED (middle)."><use>OFF->unlit, ON->lit</use></output>
^Out_LedYellow = 14
\\\<output name="Out_TrayLight" summary="Output ID of Tray light (shared output # with yellow LED)."><use>OFF->unlit, ON->lit</use></output>
^Out_TrayLight = 14


\\\<constant group="z-pulse" represents="parameter" name="ZP_TerminateExperiment" summary="End the experiment - may be used if error occurrs"></constant>
^ZP_TerminateExperiment = 1
\\\<constant group="z-pulse" represents="parameter" name="ZP_ExperimentEnd" summary="Trigged to end the experiment"></constant>
^ZP_ExperimentEnd = 2
\\\<constant group="k-pulse" represents="parameter" name="KP_ExperimentEnd" summary="Trigger the experiment to end"></constant>
^KP_ExperimentEnd = 1

\\\<constant group="z-pulse" represents="parameter" name="ZP_HouseLightsOn" summary="Turn on house lights"></constant>
^ZP_HouseLightsOn = 3
\\\<constant group="z-pulse" represents="parameter" name="ZP_HouseLightsOff" summary="Turn off house lights"></constant>
^ZP_HouseLightsOff = 4

\\\<constant group="z-pulse" represents="parameter" name="ZP_GivePellets" summary="Dispense the number of pellets provided by S"></constant>
^ZP_GivePellets = 5
\\\<constant group="z-pulse" represents="parameter" name="ZP_PelletsGiven" summary="Triggered when the full number of pellets has been delivered (number = S)"></constant>
^ZP_PelletsGiven = 6


\\\<constant group="z-pulse" represents="parameter" name="ZP_ExtendLeverSingle" summary="Extend single lever determined by A(^A_CurrentLever)"></constant>
^ZP_ExtendLeverSingle = 7
\\\<constant group="z-pulse" represents="parameter" name="ZP_ExtendLeverAll" summary="Extend all levers"></constant>
^ZP_ExtendLeverAll = 8
\\\<constant group="z-pulse" represents="parameter" name="ZP_RetractLeverAll" summary="Retract all levers"></constant>
^ZP_RetractLeverAll = 9

\\\<constant group="z-pulse" represents="parameter" name="ZP_TimerStart" summary="Used to start a 'timer' which will trigger a ZP_TimerReached when time passed - set V with delay milliseconds"></constant>
^ZP_TimerStart = 10
\\\<constant group="z-pulse" represents="parameter" name="ZP_TimerReached" summary="Triggered when the timer is triggered, and then reached"></constant>
^ZP_TimerReached = 11

\\\<constant group="z-pulse" represents="parameter" name="ZP_StartVideoRec" summary="Start video recording"></constant>
^ZP_StartVideoRec = 12
\\\<constant group="z-pulse" represents="parameter" name="ZP_EndVideoRec" summary="End video recording"></constant>
^ZP_EndVideoRec = 13

\\\ARRAYS
\\\<array name="A" outputName="Trials overview" summary="Trial summary data">
DIM A = 6
\\\<column name="A_CompletedTrials" outputName="Total trials" summary="The number of trials that have already been completed"></column>
^A_CompletedTrials = 0
\\\<column name="A_SuccessfulTrials" outputName="Successful trials" summary="The number of trials that have been successfully completed (middle and side levers pressed)"></column>
^A_SuccessfulTrials = 1
\\\<column name="A_CurrentHours" outputName="Hours" summary="Hours since commencement (for H:M:S.MS)"></column>
^A_CurrentHours = 2
\\\<column name="A_CurrentMinutes" outputName="Minutes" summary="Minutes since commencement (for H:M:S.MS)"></column>
^A_CurrentMinutes = 3
\\\<column name="A_CurrentSeconds" outputName="Seconds" summary="Seconds since commencement (for H:M:S.MS)"></column>
^A_CurrentSeconds = 4
\\\<column name="A_CurrentMilliseconds" outputName="Milliseconds" summary="Milliseconds since commencement (for H:M:S.MS) "></column>
^A_CurrentMilliseconds = 5
\\\<column name="A_CurrentLever" summary="Current lever in use"></column>
^A_CurrentLever = 6
\\\</array>

\\\<array name="B" outputName="Trials" summary="Specific trial data">
DIM B = 80000 \ we wish it could be (^Gen_MaxTrials * B_TrialIndexMultiplier) - 1
\\\<column name="B_TrialNumber" outputName="Trial" summary="Number of this trial"></column>
^B_TrialNumber = 0
\\\<column name="B_TrialSuccessful" outputName="Successful?" summary="Whether the trial was successful (No=0, Yes=1)"></column>
^B_TrialSuccessful = 1
\\\<column name="B_TrialTimeHour" outputName="Hour" summary="Time post-commencement (H) this trial occurred"></column>
^B_TrialTimeHour = 2
\\\<column name="B_TrialTimeMinute" outputName="Minute" summary="Time post-commencement (M) this trial occurred"></column>
^B_TrialTimeMinute = 3
\\\<column name="B_TrialTimeSecond" outputName="Second" summary="Time post-commencement (S) this trial occurred"></column>
^B_TrialTimeSecond = 4
\\\<column name="B_TrialTimeMillisecond" outputName="Millisecond" summary="Time post-commencement (MS) this trial occurred"></column>
^B_TrialTimeMillisecond = 5
\\\<column name="B_TrialMsec" outputName="Msec from start" summary="Time post-commencement (msec) this trial occurred TOTAL - Not related to H:M:S"></column>
^B_TrialMsec = 6
\\\<column name="B_HeadEntryDelay" outputName="Head entry delay" summary="Time (in msec) after start of this trial the animal put its head in the head entry; -1 if didn't occur"></column>
^B_HeadEntryDelay = 7
\\\<column name="B_SecondPressDelay" outputName="Second-press delay" summary="Time (in msec) after start of this trial the retractable lever was pressed; -1 if not pressed"></column>
^B_SecondPressDelay = 8
\\\<column name="B_FalseHeadEntries" outputName="Irrelevent head entries" summary="Number of times the animal put its head in the head entry after the retractable lever was extended"></column>
^B_FalseHeadEntries = 9
\\\<column name="B_ExtendedLever" outputName="Extended lever" summary="Which lever was (or would have been) extended (0=Left  1=Right  2=Centre)"></column>
^B_ExtendedLever = 10
\\\</array>
\\\<constant group="general" represents="parameter" name="B_TrialIndexMultiplier" summary="Multiplier to be used for each trial"></constant>
^B_TrialIndexMultiplier = 11

\\\<array name="D" summary="Which lever to extend/monitor press for each training trial">
LIST D = 0,1
\\\<column name="D_LeverID" summary="ID of lever to be pressed - not used since there is only one column"></column>
\\\</array>

\\\Variable declarations
\\\<!--<variable name="" summary=""></variable>-->
\\\<variable name="P" summary="Storage variable for camera state"></variable>
\\\<variable name="Q" summary="Current offset for B array"></variable>
\\\<variable name="S" summary="Number of pellets to give - set before using ZP_GivePellets"></variable>
\\\<variable name="T" summary="Timer - # of msec since commencement"></variable>
\\\<variable name="U" summary="Timer - variable swapping 1"></variable>
\\\<variable name="W" summary="Timer - variable swapping 2"></variable>
\\\<variable name="Y" summary="Time remaining in countdouwn timer (msec)"></variable>
\\\<variable name="V" summary="Duration timer - Time to be delayed before ZP_TimerReached in milliseconds"></variable>

\\\<stateset id="1" summary="Run the preparation and termination functions of the program">
S.S.1,
\\\<state id="1" summary="Set variables to default values">
S1,
	0":;
		SET C(^C_MaxTrials) = ^Def_MaxTrials;
		SET C(^C_RewardPellets) = ^Def_RewardPellets;
		SET C(^C_LightAfterRewardTime) = ^Def_LightAfterRewardTime;
		SET C(^C_InterTrialDelay) = ^Def_InterTrialDelay;
		---> S5
\\\</state>
\\\<state id="5" summary="Pause until start command is issued; Update displayed variables.">
S5,
	#START:;
		Z^ZP_StartVideoRec;
		---> S10
	0.01":;
		SHOW 1, Maxmimum Trials, C(^C_MaxTrials);
		SHOW 3, Completed Trials, 0;
		SHOW 4, Successful Trials, 0;
		SHOW 5, Awaiting start, 0;
		SHOW 12, Reward pellets, C(^C_RewardPellets); 
		---> SX
\\\</state>
\\\<state id="10" summary="Wait for program termination">
S10,
	#Z^ZP_TerminateExperiment:;
		Z^ZP_HouseLightsOff;
		OFF ^Out_TrayLight;
		SHOW 5, Finished, 2;
		SET B(Q + ^B_TrialIndexMultiplier + ^B_TrialNumber) = -987.987;
		---> S20

\\\</state>
\\\<state id="10" summary="Turn off all outputs, save data and end">
S20,   
  0":;
  	---> STOPABORTFLUSH
\\\</state>
\\\</stateset>


\\\<stateset id="2" summary="Operate the experiment functionally">
S.S.2,
\\\<state id="1" summary="Wait for the start trigger">
S1,
	#START:;
		SHOW 5, Running, 1;
		---> S3
\\\</state>
\\\<state id="3" summary="Reset stimulus lights, select retract lever for use">
S3,
	0":;
		RANDD A(^A_CurrentLever) = D;

		SET Q = A(^A_CompletedTrials) * ^B_TrialIndexMultiplier;
		SET B(Q + ^B_TrialNumber) = A(^A_CompletedTrials);
		SET B(Q + ^B_TrialTimeHour) = A(^A_CurrentHours), B(Q + ^B_TrialTimeMinute) = A(^A_CurrentMinutes), B(Q + ^B_TrialTimeSecond) = A(^A_CurrentSeconds), B(Q + ^B_TrialTimeMillisecond) = A(^A_CurrentMilliseconds);
		SET B(Q + ^B_TrialMsec) = T;
		SET B(Q + ^B_ExtendedLever) = A(^A_CurrentLever);

		\\initialise vars to 'not done' value of -1
		SET B(Q + ^B_HeadEntryDelay) = -1;
		SET B(Q + ^B_SecondPressDelay) = -1;

		Z^ZP_HouseLightsOn;
		ON ^Out_TrayLight;
		---> S4
\\\</state>
\\\<state id="4" summary="Wait for head entry press; off/reset if no press">
S4,
	#Z^ZP_ExperimentEnd:;
		Z^ZP_TerminateExperiment;
		---> S32

	#R^Inp_HeadEntry:;
		SET B(Q + ^B_HeadEntryDelay) = T - B(Q + ^B_TrialMsec); \calculate MSEC between trial start and lever press
		OFF ^Out_TrayLight;
		Z^ZP_ExtendLeverSingle;
		---> S7

\\\</state>
\\\<state id="7" summary="Wait for correct lever press">
S7,
  #Z^ZP_ExperimentEnd:;
	Z^ZP_TerminateExperiment;
	---> S32

  #R^Inp_LeverInputLeft:;
	SHOW 7, Left Lever Pressed, T;
	IF A(^A_CurrentLever) = ^Lever_LeftLever [@hit active lever]
		@hit active lever:;
			---> S8
  #R^Inp_LeverInputRight:;
	SHOW 7, Right Lever Pressed, T;
	IF A(^A_CurrentLever) = ^Lever_RightLever [@hit active lever]
		@hit active lever:;
			---> S8

  #R^Inp_HeadEntry:;
	SHOW 7, Head entry occurred, T;
	ADD B(Q + ^B_FalseHeadEntries); \add 1 to number of 'incorrect' centre hits
	---> SX

\\\</state>
\\\<state id="8" summary="Record press; Trigger reward given; turn on tray light; retract all levers">
S8,
	0":;
		SET B(Q + ^B_TrialSuccessful) = 1; \\record trial as successful
		SET B(Q + ^B_SecondPressDelay) = T - B(Q + ^B_TrialMsec) - 10; \calculate MSEC between trial start and lever press
		ADD A(^A_SuccessfulTrials);
		ON ^Out_TrayLight;
		SET S = C(^C_RewardPellets);
		Z^ZP_GivePellets;
		Z^ZP_RetractLeverAll;

		SET V = C(^C_LightAfterRewardTime) * 1000; \\set max time for next step (10 sec = 10000msec)
		---> S9
\\\</state>
\\\<state id="9" summary="Wait until full number of reward pellets dispensed, then continue">
S9,
	#Z^ZP_PelletsGiven:;
		Z^ZP_TimerStart;
		SHOW 30, Jump to state, 10;
		---> S10
\\\</state>
\\\<state id="10" summary="Wait for eating delay, then continue">
S10,
  #Z^ZP_TimerReached:;
		OFF ^Out_TrayLight;
		IF C(^C_LightsOffBetweenTrials) = 1 [@lights off, @lights on]
			@lights off:;
				Z^ZP_HouseLightsOff;
				---> S30
			@lights on:;
				---> S30
	
\\\</state>
\\\<state id="30" summary="Check if full number of trials have been completed, and if so issue terminate command.">
S30,
	#Z^ZP_ExperimentEnd:;
		Z^ZP_TerminateExperiment;
		---> S32

	0":;
		ADD A(^A_CompletedTrials);
		SHOW 3, Completed Trials, A(^A_CompletedTrials);
		SHOW 4, Successful Trials, A(^A_SuccessfulTrials);
		IF A(^A_CompletedTrials) >= C(^C_MaxTrials) [@count reached, @count not reached]
			@count reached:;
				Z^ZP_TerminateExperiment;
				---> S32
			@count not reached:;
				SET V = C(^C_InterTrialDelay) * 1000; \\set max time for next step (10 sec = 10000msec)
				Z^ZP_TimerStart;
				---> S31
\\\</state>
\\\<state id="31" summary="Wait for trial duration to be reached, then restart">
S31,
	#Z^ZP_ExperimentEnd:;
		Z^ZP_TerminateExperiment;
		---> S32

	#Z^ZP_TimerReached:;
		---> S3
\\\</state>
\\\</stateset>


\\\<stateset id="3" summary="Operate the pellet dispenser">
S.S.3,
\\\<state id="1" summary="Wait for give pellets (ZP_GivePellets) to be triggered">
S1,
	#Z^ZP_GivePellets:;
		IF S > 0 [@have pellet count to give, @give no pellets]
			@have pellets to give:;
				ON ^Out_PelletDispenser;
				SUB S;
				---> S2
			@give no pellets:;
				Z^ZP_PelletsGiven;
				---> S1
\\\</state>
\\\<state id="2" summary="Pause 100ms between pellet dispenser trigger going high and back to low">
S2,
	0.1":;
		OFF ^Out_PelletDispenser;
		---> S3
\\\</state>
\\\<state id="3" summary="Drop pellets until full number of reward pellets reached">
S3,
	0.4":;
		IF S > 0 [@still pellets to drop, @sufficient pellets]
			@still pellets to drop:;
				SUB S;
				ON ^Out_PelletDispenser;
				---> S2
			@sufficient pellets:;
				Z^ZP_PelletsGiven;
				---> S1
\\\</state>
\\\</stateset>



\\\<stateset id="5" summary="Control house light system">
S.S.5,
\\\<state id="1" summary="Wait for lighting change command">
S1,
	#Z^ZP_HouseLightsOn:; \if split, then could be problems due to temporal precision
		IF ^Lights_UseHouseRear = 1 [@switch on rear light, @do not switch on rear light]
			@switch on rear light:;
				ON ^Out_HouseLightRear;
				IF ^Lights_UseHouseMid = 1 [@switch on mid light, @do not switch on mid light]
					@switch on mid light:;
						ON ^Out_HouseLightMid;
						IF ^Lights_UseHouseFront = 1 [@switch on front light]
							@switch on front light:;
								ON ^Out_HouseLightFront;
									---> SX
					@do not switch on mid light:;
						IF ^Lights_UseHouseFront = 1 [@switch on front light]
							@switch on front light:;
								ON ^Out_HouseLightFront;
									---> SX
			@do not switch on rear light:;
					IF ^Lights_UseHouseMid = 1 [@switch on mid light, @do not switch on mid light]
					@switch on mid light:;
						ON ^Out_HouseLightMid;
						IF ^Lights_UseHouseFront = 1 [@switch on front light]
							@switch on front light:;
								ON ^Out_HouseLightFront;
									---> SX
					@do not switch on mid light:;
						IF ^Lights_UseHouseFront = 1 [@switch on front light]
							@switch on front light:;
								ON ^Out_HouseLightFront;
									---> SX
	#Z^ZP_HouseLightsOff:; 
		OFF ^Out_HouseLightRear;
		OFF ^Out_HouseLightMid;
		OFF ^Out_HouseLightFront;
		---> SX
	#Z^ZP_TerminateExperiment:;
		---> S32
\\\</state>
\\\</stateset>

\\\<stateset id="7" summary="Timer - counts up in msec (in steps of 10 msec)">
S.S.7,
\\\<state id="1" summary="Wait for start trigger">
S1,
	#START:;
		---> S2
\\\<state id="2" summary="Increment counter, hour, minutes, seconds, milliseconds">
\\\</state>
S2,
	0.01":;
		SET T = T + 10;
		SET A(^A_CurrentMilliseconds) = A(^A_CurrentMilliseconds) + 10;
		SET U = A(^A_CurrentMilliseconds), W = A(^A_CurrentSeconds);
		~ IF (U = 1000) then begin U := 0; W := W + 1; end; ~;
		SET A(^A_CurrentMilliseconds) = U, U = W, W = A(^A_CurrentMinutes);
		~ IF (U = 60) then begin U := 0; W := W + 1; end; ~;
		SET A(^A_CurrentSeconds) = U, U = W, W = A(^A_CurrentHours);
		~ IF (U = 60) then begin U := 0; W := W + 1; end; ~;
		SET A(^A_CurrentMinutes) = U, A(^A_CurrentHours) = W;
		SHOW 20, Hours, A(^A_CurrentHours);
		SHOW 21, Minutes, A(^A_CurrentMinutes);
		SHOW 22, Seconds, A(^A_CurrentSeconds);
		SHOW 23, Milliseconds, A(^A_CurrentMilliseconds);
			---> SX
	#Z^ZP_TerminateExperiment:;
		---> S32
\\\</state>
\\\</stateset>

\\\<stateset id="8" summary="Control lever extensions">
S.S.8,
\\\<state id="1" summary="Wait for lighting change command">
S1,
	#Z^ZP_ExtendLeverSingle:;
		SHOW 13, Extend single levers issued, T;
		IF A(^A_CurrentLever) = ^Lever_LeftLever [@extend left lever, @not left lever]
			@extend left lever:;
				ON ^Out_LeftLeverRetract;
				---> SX
			@not left lever:;
				IF A(^A_CurrentLever) = ^Lever_RightLever [@extend right lever]
					@extend right lever:;
						ON ^Out_RightLeverRetract;
						---> SX
	#Z^ZP_ExtendLeverAll:;
		SHOW 13, Extend all levers issued, T;
		ON ^Out_LeftLeverRetract;
		ON ^Out_RightLeverRetract;
		---> SX
	#Z^ZP_RetractLeverAll:;
		SHOW 13, Retract all levers issued, T;
		OFF ^Out_LeftLeverRetract;
		OFF ^Out_RightLeverRetract;
		---> SX
	#Z^ZP_TerminateExperiment:;
		OFF ^Out_LeftLeverRetract;
		OFF ^Out_RightLeverRetract;
		---> S32
\\\</state>
\\\</stateset>

\\\<stateset id="9" summary="Experiment timer - check if experiment has reached maximum duration">
S.S.9,
\\\<state id="1" summary="Wait for start trigger">
S1,
	#START:;
		---> S2
\\\<state id="2" summary="Every cycle, check if max duration of experiment reached">
\\\</state>
S2,
	#K^KP_ExperimentEnd:;
				SHOW 5, Manually terminated, 0;
				---> S3
\\\</state>
\\\<state id="3" summary="Trigger a ZP_ExperimentEnd every 10ms - this will make sure that everything receives it even">
S3,
	0.01":;
		Z^ZP_ExperimentEnd;
		---> SX
\\\</state>
\\\</stateset>

\\\<stateset id="11" summary="General timer - when triggered, waing X milliseconds, then respond with a trigger">
S.S.11,
\\\<state id="1" summary="Wait for start trigger">
S1,
	#Z^ZP_TimerStart:;
		SET Y = V - 10; \have to subtract 10 msec for the time taken to get to the next state
		---> S2
\\\<state id="2" summary="Every cycle, check if max duration of experiment reached">
\\\</state>
S2,
	0.01":;
		SET Y = Y - 10;
		SHOW 5, Current step timer (msec), Y;
		IF Y <= 0 [@countdown finished]
			@countdown finished:;
				Z^ZP_TimerReached;
				---> S1
	#Z^ZP_TimerStart:;
		SET Y = V - 10;
		---> S2
	#Z^ZP_TerminateExperiment:;
		---> S32
\\\</state>
\\\</stateset>

\\\<stateset id="15" summary="Camera management - connect to camera system and start/stop video">
S.S.15,
\\\<state id="1" summary="Set constants for video connection state">
S1,
	0":;
		~P := UNCONNECTED;~;
		SET C(^C_CamUnconnectedState) = P;
        ~P := CONNECT_OK;~;
		SET C(^C_CamConnectOkState) = P;
        ~P := CONNECT_FAIL;~;
		SET C(^C_CamConnectFailState) = P;
		---> S2
\\\</state>
\\\<state id="2" summary="Wait for video commands">
S2,
	#Z^ZP_StartVideoRec:;
		~ IF ((box = 1) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX1', StartSavingEvent, 'StartEvent'); end; ~;
		~ IF ((box = 2) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX2', StartSavingEvent, 'StartEvent'); end; ~;
		~ IF ((box = 3) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX3', StartSavingEvent, 'StartEvent'); end; ~;
		~ IF ((box = 4) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX4', StartSavingEvent, 'StartEvent'); end; ~;
		---> SX
	#Z^ZP_EndVideoRec:;
		~ IF ((box = 1) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX1', StopSavingEvent, 'StopEvent'); end; ~;
		~ IF ((box = 2) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX2', StopSavingEvent, 'StopEvent'); end; ~;
		~ IF ((box = 3) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX3', StopSavingEvent, 'StopEvent'); end; ~;
		~ IF ((box = 4) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX4', StopSavingEvent, 'StopEvent'); end; ~;
		---> SX
	#Z^ZP_TerminateExperiment:;
		~ IF ((box = 1) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX1', StopSavingEvent, 'StopEvent'); end; ~;
		~ IF ((box = 2) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX2', StopSavingEvent, 'StopEvent'); end; ~;
		~ IF ((box = 3) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX3', StopSavingEvent, 'StopEvent'); end; ~;
		~ IF ((box = 4) and (P = CONNECT_OK)) then begin WriteEventVM('.', 'BOX4', StopSavingEvent, 'StopEvent'); end; ~;

		~ IF ((box = 1) and (P = CONNECT_OK)) then begin DisconnectVM('.', 'BOX1'); O := GetIfaceStatus();end;~;
		~ IF ((box = 2) and (P = CONNECT_OK)) then begin DisconnectVM('.', 'BOX2'); O := GetIfaceStatus();end;~;
		~ IF ((box = 3) and (P = CONNECT_OK)) then begin DisconnectVM('.', 'BOX3'); O := GetIfaceStatus();end;~;
		~ IF ((box = 4) and (P = CONNECT_OK)) then begin DisconnectVM('.', 'BOX4'); O := GetIfaceStatus();end;~;
		---> S32
	0.1":;
		~ IF ((box = 1) and (P <> CONNECT_OK)) then begin ConnectToVMEx(MG, BOX, '.', 'BOX1'); P := GetIfaceStatus();end;~;
		~ IF ((box = 2) and (P <> CONNECT_OK)) then begin ConnectToVMEx(MG, BOX, '.', 'BOX2'); P := GetIfaceStatus();end;~;
		~ IF ((box = 3) and (P <> CONNECT_OK)) then begin ConnectToVMEx(MG, BOX, '.', 'BOX3'); P := GetIfaceStatus();end;~;
		~ IF ((box = 4) and (P <> CONNECT_OK)) then begin ConnectToVMEx(MG, BOX, '.', 'BOX4'); P := GetIfaceStatus();end;~;
		IF (P = C(^C_CamUnconnectedState)) [@UNCON, @OTHER]
			 @UNCON: SHOW 14, Video Unconnected,0 ---> SX
             @OTHER: IF (P = C(^C_CamConnectOkState)) [@CONNECTED, @OTHER2]
                @CONNECTED: SHOW 14, Video OK,0 ---> SX
                @OTHER2: IF (P = C(^C_CamConnectFailState)) [@FAIL, @OTHER3]
                   @FAIL:   SHOW 14, Video Failed,0 ---> SX
                   @OTHER3: SHOW 14, Video Unknown,0  ---> SX
\\\</state>
\\\</stateset>

\\\</program>
